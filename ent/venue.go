// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/scarlet0725/prism-api/ent/venue"
)

// Venue is the model entity for the Venue schema.
type Venue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VenueID holds the value of the "venue_id" field.
	VenueID string `json:"venue_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// WebSite holds the value of the "web_site" field.
	WebSite []byte `json:"web_site,omitempty"`
	// Postcode holds the value of the "postcode" field.
	Postcode string `json:"postcode,omitempty"`
	// Prefecture holds the value of the "prefecture" field.
	Prefecture string `json:"prefecture,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Street holds the value of the "street" field.
	Street string `json:"street,omitempty"`
	// IsOpen holds the value of the "is_open" field.
	IsOpen bool `json:"is_open,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VenueQuery when eager-loading is set.
	Edges VenueEdges `json:"edges"`
}

// VenueEdges holds the relations/edges for other nodes in the graph.
type VenueEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e VenueEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Venue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case venue.FieldWebSite:
			values[i] = new([]byte)
		case venue.FieldIsOpen:
			values[i] = new(sql.NullBool)
		case venue.FieldID:
			values[i] = new(sql.NullInt64)
		case venue.FieldVenueID, venue.FieldName, venue.FieldDescription, venue.FieldPostcode, venue.FieldPrefecture, venue.FieldCity, venue.FieldStreet:
			values[i] = new(sql.NullString)
		case venue.FieldCreatedAt, venue.FieldUpdatedAt, venue.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Venue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Venue fields.
func (v *Venue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case venue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case venue.FieldVenueID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				v.VenueID = value.String
			}
		case venue.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case venue.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case venue.FieldWebSite:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field web_site", values[i])
			} else if value != nil {
				v.WebSite = *value
			}
		case venue.FieldPostcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postcode", values[i])
			} else if value.Valid {
				v.Postcode = value.String
			}
		case venue.FieldPrefecture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefecture", values[i])
			} else if value.Valid {
				v.Prefecture = value.String
			}
		case venue.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				v.City = value.String
			}
		case venue.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street", values[i])
			} else if value.Valid {
				v.Street = value.String
			}
		case venue.FieldIsOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_open", values[i])
			} else if value.Valid {
				v.IsOpen = value.Bool
			}
		case venue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case venue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case venue.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = new(time.Time)
				*v.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryEvents queries the "events" edge of the Venue entity.
func (v *Venue) QueryEvents() *EventQuery {
	return (&VenueClient{config: v.config}).QueryEvents(v)
}

// Update returns a builder for updating this Venue.
// Note that you need to call Venue.Unwrap() before calling this method if this Venue
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Venue) Update() *VenueUpdateOne {
	return (&VenueClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Venue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Venue) Unwrap() *Venue {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Venue is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Venue) String() string {
	var builder strings.Builder
	builder.WriteString("Venue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("venue_id=")
	builder.WriteString(v.VenueID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(v.Description)
	builder.WriteString(", ")
	builder.WriteString("web_site=")
	builder.WriteString(fmt.Sprintf("%v", v.WebSite))
	builder.WriteString(", ")
	builder.WriteString("postcode=")
	builder.WriteString(v.Postcode)
	builder.WriteString(", ")
	builder.WriteString("prefecture=")
	builder.WriteString(v.Prefecture)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(v.City)
	builder.WriteString(", ")
	builder.WriteString("street=")
	builder.WriteString(v.Street)
	builder.WriteString(", ")
	builder.WriteString("is_open=")
	builder.WriteString(fmt.Sprintf("%v", v.IsOpen))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := v.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Venues is a parsable slice of Venue.
type Venues []*Venue

func (v Venues) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
