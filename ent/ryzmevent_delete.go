// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/ryzmevent"
)

// RyzmEventDelete is the builder for deleting a RyzmEvent entity.
type RyzmEventDelete struct {
	config
	hooks    []Hook
	mutation *RyzmEventMutation
}

// Where appends a list predicates to the RyzmEventDelete builder.
func (red *RyzmEventDelete) Where(ps ...predicate.RyzmEvent) *RyzmEventDelete {
	red.mutation.Where(ps...)
	return red
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (red *RyzmEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, RyzmEventMutation](ctx, red.sqlExec, red.mutation, red.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (red *RyzmEventDelete) ExecX(ctx context.Context) int {
	n, err := red.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (red *RyzmEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: ryzmevent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ryzmevent.FieldID,
			},
		},
	}
	if ps := red.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, red.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	red.mutation.done = true
	return affected, err
}

// RyzmEventDeleteOne is the builder for deleting a single RyzmEvent entity.
type RyzmEventDeleteOne struct {
	red *RyzmEventDelete
}

// Exec executes the deletion query.
func (redo *RyzmEventDeleteOne) Exec(ctx context.Context) error {
	n, err := redo.red.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ryzmevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (redo *RyzmEventDeleteOne) ExecX(ctx context.Context) {
	redo.red.ExecX(ctx)
}
