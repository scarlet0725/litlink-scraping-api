// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/scarlet0725/prism-api/ent/migrate"

	"github.com/scarlet0725/prism-api/ent/artist"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/externalcalendar"
	"github.com/scarlet0725/prism-api/ent/googleoauthstate"
	"github.com/scarlet0725/prism-api/ent/googleoauthtoken"
	"github.com/scarlet0725/prism-api/ent/role"
	"github.com/scarlet0725/prism-api/ent/ryzmevent"
	"github.com/scarlet0725/prism-api/ent/unstructuredeventinformation"
	"github.com/scarlet0725/prism-api/ent/user"
	"github.com/scarlet0725/prism-api/ent/venue"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Artist is the client for interacting with the Artist builders.
	Artist *ArtistClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// ExternalCalendar is the client for interacting with the ExternalCalendar builders.
	ExternalCalendar *ExternalCalendarClient
	// GoogleOauthState is the client for interacting with the GoogleOauthState builders.
	GoogleOauthState *GoogleOauthStateClient
	// GoogleOauthToken is the client for interacting with the GoogleOauthToken builders.
	GoogleOauthToken *GoogleOauthTokenClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// RyzmEvent is the client for interacting with the RyzmEvent builders.
	RyzmEvent *RyzmEventClient
	// UnStructuredEventInformation is the client for interacting with the UnStructuredEventInformation builders.
	UnStructuredEventInformation *UnStructuredEventInformationClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Venue is the client for interacting with the Venue builders.
	Venue *VenueClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Artist = NewArtistClient(c.config)
	c.Event = NewEventClient(c.config)
	c.ExternalCalendar = NewExternalCalendarClient(c.config)
	c.GoogleOauthState = NewGoogleOauthStateClient(c.config)
	c.GoogleOauthToken = NewGoogleOauthTokenClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.RyzmEvent = NewRyzmEventClient(c.config)
	c.UnStructuredEventInformation = NewUnStructuredEventInformationClient(c.config)
	c.User = NewUserClient(c.config)
	c.Venue = NewVenueClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                          ctx,
		config:                       cfg,
		Artist:                       NewArtistClient(cfg),
		Event:                        NewEventClient(cfg),
		ExternalCalendar:             NewExternalCalendarClient(cfg),
		GoogleOauthState:             NewGoogleOauthStateClient(cfg),
		GoogleOauthToken:             NewGoogleOauthTokenClient(cfg),
		Role:                         NewRoleClient(cfg),
		RyzmEvent:                    NewRyzmEventClient(cfg),
		UnStructuredEventInformation: NewUnStructuredEventInformationClient(cfg),
		User:                         NewUserClient(cfg),
		Venue:                        NewVenueClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                          ctx,
		config:                       cfg,
		Artist:                       NewArtistClient(cfg),
		Event:                        NewEventClient(cfg),
		ExternalCalendar:             NewExternalCalendarClient(cfg),
		GoogleOauthState:             NewGoogleOauthStateClient(cfg),
		GoogleOauthToken:             NewGoogleOauthTokenClient(cfg),
		Role:                         NewRoleClient(cfg),
		RyzmEvent:                    NewRyzmEventClient(cfg),
		UnStructuredEventInformation: NewUnStructuredEventInformationClient(cfg),
		User:                         NewUserClient(cfg),
		Venue:                        NewVenueClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Artist.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Artist.Use(hooks...)
	c.Event.Use(hooks...)
	c.ExternalCalendar.Use(hooks...)
	c.GoogleOauthState.Use(hooks...)
	c.GoogleOauthToken.Use(hooks...)
	c.Role.Use(hooks...)
	c.RyzmEvent.Use(hooks...)
	c.UnStructuredEventInformation.Use(hooks...)
	c.User.Use(hooks...)
	c.Venue.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Artist.Intercept(interceptors...)
	c.Event.Intercept(interceptors...)
	c.ExternalCalendar.Intercept(interceptors...)
	c.GoogleOauthState.Intercept(interceptors...)
	c.GoogleOauthToken.Intercept(interceptors...)
	c.Role.Intercept(interceptors...)
	c.RyzmEvent.Intercept(interceptors...)
	c.UnStructuredEventInformation.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.Venue.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ArtistMutation:
		return c.Artist.mutate(ctx, m)
	case *EventMutation:
		return c.Event.mutate(ctx, m)
	case *ExternalCalendarMutation:
		return c.ExternalCalendar.mutate(ctx, m)
	case *GoogleOauthStateMutation:
		return c.GoogleOauthState.mutate(ctx, m)
	case *GoogleOauthTokenMutation:
		return c.GoogleOauthToken.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *RyzmEventMutation:
		return c.RyzmEvent.mutate(ctx, m)
	case *UnStructuredEventInformationMutation:
		return c.UnStructuredEventInformation.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VenueMutation:
		return c.Venue.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ArtistClient is a client for the Artist schema.
type ArtistClient struct {
	config
}

// NewArtistClient returns a client for the Artist from the given config.
func NewArtistClient(c config) *ArtistClient {
	return &ArtistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `artist.Hooks(f(g(h())))`.
func (c *ArtistClient) Use(hooks ...Hook) {
	c.hooks.Artist = append(c.hooks.Artist, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `artist.Intercept(f(g(h())))`.
func (c *ArtistClient) Intercept(interceptors ...Interceptor) {
	c.inters.Artist = append(c.inters.Artist, interceptors...)
}

// Create returns a builder for creating a Artist entity.
func (c *ArtistClient) Create() *ArtistCreate {
	mutation := newArtistMutation(c.config, OpCreate)
	return &ArtistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Artist entities.
func (c *ArtistClient) CreateBulk(builders ...*ArtistCreate) *ArtistCreateBulk {
	return &ArtistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Artist.
func (c *ArtistClient) Update() *ArtistUpdate {
	mutation := newArtistMutation(c.config, OpUpdate)
	return &ArtistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArtistClient) UpdateOne(a *Artist) *ArtistUpdateOne {
	mutation := newArtistMutation(c.config, OpUpdateOne, withArtist(a))
	return &ArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArtistClient) UpdateOneID(id int) *ArtistUpdateOne {
	mutation := newArtistMutation(c.config, OpUpdateOne, withArtistID(id))
	return &ArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Artist.
func (c *ArtistClient) Delete() *ArtistDelete {
	mutation := newArtistMutation(c.config, OpDelete)
	return &ArtistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArtistClient) DeleteOne(a *Artist) *ArtistDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArtistClient) DeleteOneID(id int) *ArtistDeleteOne {
	builder := c.Delete().Where(artist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArtistDeleteOne{builder}
}

// Query returns a query builder for Artist.
func (c *ArtistClient) Query() *ArtistQuery {
	return &ArtistQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a Artist entity by its id.
func (c *ArtistClient) Get(ctx context.Context, id int) (*Artist, error) {
	return c.Query().Where(artist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArtistClient) GetX(ctx context.Context, id int) *Artist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a Artist.
func (c *ArtistClient) QueryEvents(a *Artist) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artist.EventsTable, artist.EventsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArtistClient) Hooks() []Hook {
	return c.hooks.Artist
}

// Interceptors returns the client interceptors.
func (c *ArtistClient) Interceptors() []Interceptor {
	return c.inters.Artist
}

func (c *ArtistClient) mutate(ctx context.Context, m *ArtistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArtistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArtistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArtistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Artist mutation op: %q", m.Op())
	}
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `event.Intercept(f(g(h())))`.
func (c *EventClient) Intercept(interceptors ...Interceptor) {
	c.inters.Event = append(c.inters.Event, interceptors...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id int) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Event.
func (c *EventClient) QueryUsers(e *Event) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.UsersTable, event.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArtists queries the artists edge of a Event.
func (c *EventClient) QueryArtists(e *Event) *ArtistQuery {
	query := (&ArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(artist.Table, artist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, event.ArtistsTable, event.ArtistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelatedRyzmEvents queries the related_ryzm_events edge of a Event.
func (c *EventClient) QueryRelatedRyzmEvents(e *Event) *RyzmEventQuery {
	query := (&RyzmEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(ryzmevent.Table, ryzmevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, event.RelatedRyzmEventsTable, event.RelatedRyzmEventsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUnStructuredEventInformations queries the un_structured_event_informations edge of a Event.
func (c *EventClient) QueryUnStructuredEventInformations(e *Event) *UnStructuredEventInformationQuery {
	query := (&UnStructuredEventInformationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(unstructuredeventinformation.Table, unstructuredeventinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, event.UnStructuredEventInformationsTable, event.UnStructuredEventInformationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVenue queries the venue edge of a Event.
func (c *EventClient) QueryVenue(e *Event) *VenueQuery {
	query := (&VenueClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(venue.Table, venue.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.VenueTable, event.VenueColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// Interceptors returns the client interceptors.
func (c *EventClient) Interceptors() []Interceptor {
	return c.inters.Event
}

func (c *EventClient) mutate(ctx context.Context, m *EventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Event mutation op: %q", m.Op())
	}
}

// ExternalCalendarClient is a client for the ExternalCalendar schema.
type ExternalCalendarClient struct {
	config
}

// NewExternalCalendarClient returns a client for the ExternalCalendar from the given config.
func NewExternalCalendarClient(c config) *ExternalCalendarClient {
	return &ExternalCalendarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `externalcalendar.Hooks(f(g(h())))`.
func (c *ExternalCalendarClient) Use(hooks ...Hook) {
	c.hooks.ExternalCalendar = append(c.hooks.ExternalCalendar, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `externalcalendar.Intercept(f(g(h())))`.
func (c *ExternalCalendarClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExternalCalendar = append(c.inters.ExternalCalendar, interceptors...)
}

// Create returns a builder for creating a ExternalCalendar entity.
func (c *ExternalCalendarClient) Create() *ExternalCalendarCreate {
	mutation := newExternalCalendarMutation(c.config, OpCreate)
	return &ExternalCalendarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExternalCalendar entities.
func (c *ExternalCalendarClient) CreateBulk(builders ...*ExternalCalendarCreate) *ExternalCalendarCreateBulk {
	return &ExternalCalendarCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExternalCalendar.
func (c *ExternalCalendarClient) Update() *ExternalCalendarUpdate {
	mutation := newExternalCalendarMutation(c.config, OpUpdate)
	return &ExternalCalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExternalCalendarClient) UpdateOne(ec *ExternalCalendar) *ExternalCalendarUpdateOne {
	mutation := newExternalCalendarMutation(c.config, OpUpdateOne, withExternalCalendar(ec))
	return &ExternalCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExternalCalendarClient) UpdateOneID(id int) *ExternalCalendarUpdateOne {
	mutation := newExternalCalendarMutation(c.config, OpUpdateOne, withExternalCalendarID(id))
	return &ExternalCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExternalCalendar.
func (c *ExternalCalendarClient) Delete() *ExternalCalendarDelete {
	mutation := newExternalCalendarMutation(c.config, OpDelete)
	return &ExternalCalendarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExternalCalendarClient) DeleteOne(ec *ExternalCalendar) *ExternalCalendarDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExternalCalendarClient) DeleteOneID(id int) *ExternalCalendarDeleteOne {
	builder := c.Delete().Where(externalcalendar.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExternalCalendarDeleteOne{builder}
}

// Query returns a query builder for ExternalCalendar.
func (c *ExternalCalendarClient) Query() *ExternalCalendarQuery {
	return &ExternalCalendarQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a ExternalCalendar entity by its id.
func (c *ExternalCalendarClient) Get(ctx context.Context, id int) (*ExternalCalendar, error) {
	return c.Query().Where(externalcalendar.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExternalCalendarClient) GetX(ctx context.Context, id int) *ExternalCalendar {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ExternalCalendar.
func (c *ExternalCalendarClient) QueryUser(ec *ExternalCalendar) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(externalcalendar.Table, externalcalendar.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, externalcalendar.UserTable, externalcalendar.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExternalCalendarClient) Hooks() []Hook {
	return c.hooks.ExternalCalendar
}

// Interceptors returns the client interceptors.
func (c *ExternalCalendarClient) Interceptors() []Interceptor {
	return c.inters.ExternalCalendar
}

func (c *ExternalCalendarClient) mutate(ctx context.Context, m *ExternalCalendarMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExternalCalendarCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExternalCalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExternalCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExternalCalendarDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExternalCalendar mutation op: %q", m.Op())
	}
}

// GoogleOauthStateClient is a client for the GoogleOauthState schema.
type GoogleOauthStateClient struct {
	config
}

// NewGoogleOauthStateClient returns a client for the GoogleOauthState from the given config.
func NewGoogleOauthStateClient(c config) *GoogleOauthStateClient {
	return &GoogleOauthStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `googleoauthstate.Hooks(f(g(h())))`.
func (c *GoogleOauthStateClient) Use(hooks ...Hook) {
	c.hooks.GoogleOauthState = append(c.hooks.GoogleOauthState, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `googleoauthstate.Intercept(f(g(h())))`.
func (c *GoogleOauthStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.GoogleOauthState = append(c.inters.GoogleOauthState, interceptors...)
}

// Create returns a builder for creating a GoogleOauthState entity.
func (c *GoogleOauthStateClient) Create() *GoogleOauthStateCreate {
	mutation := newGoogleOauthStateMutation(c.config, OpCreate)
	return &GoogleOauthStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoogleOauthState entities.
func (c *GoogleOauthStateClient) CreateBulk(builders ...*GoogleOauthStateCreate) *GoogleOauthStateCreateBulk {
	return &GoogleOauthStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoogleOauthState.
func (c *GoogleOauthStateClient) Update() *GoogleOauthStateUpdate {
	mutation := newGoogleOauthStateMutation(c.config, OpUpdate)
	return &GoogleOauthStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoogleOauthStateClient) UpdateOne(gos *GoogleOauthState) *GoogleOauthStateUpdateOne {
	mutation := newGoogleOauthStateMutation(c.config, OpUpdateOne, withGoogleOauthState(gos))
	return &GoogleOauthStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoogleOauthStateClient) UpdateOneID(id int) *GoogleOauthStateUpdateOne {
	mutation := newGoogleOauthStateMutation(c.config, OpUpdateOne, withGoogleOauthStateID(id))
	return &GoogleOauthStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoogleOauthState.
func (c *GoogleOauthStateClient) Delete() *GoogleOauthStateDelete {
	mutation := newGoogleOauthStateMutation(c.config, OpDelete)
	return &GoogleOauthStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoogleOauthStateClient) DeleteOne(gos *GoogleOauthState) *GoogleOauthStateDeleteOne {
	return c.DeleteOneID(gos.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoogleOauthStateClient) DeleteOneID(id int) *GoogleOauthStateDeleteOne {
	builder := c.Delete().Where(googleoauthstate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoogleOauthStateDeleteOne{builder}
}

// Query returns a query builder for GoogleOauthState.
func (c *GoogleOauthStateClient) Query() *GoogleOauthStateQuery {
	return &GoogleOauthStateQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a GoogleOauthState entity by its id.
func (c *GoogleOauthStateClient) Get(ctx context.Context, id int) (*GoogleOauthState, error) {
	return c.Query().Where(googleoauthstate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoogleOauthStateClient) GetX(ctx context.Context, id int) *GoogleOauthState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a GoogleOauthState.
func (c *GoogleOauthStateClient) QueryUser(gos *GoogleOauthState) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gos.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(googleoauthstate.Table, googleoauthstate.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, googleoauthstate.UserTable, googleoauthstate.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gos.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoogleOauthStateClient) Hooks() []Hook {
	return c.hooks.GoogleOauthState
}

// Interceptors returns the client interceptors.
func (c *GoogleOauthStateClient) Interceptors() []Interceptor {
	return c.inters.GoogleOauthState
}

func (c *GoogleOauthStateClient) mutate(ctx context.Context, m *GoogleOauthStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoogleOauthStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoogleOauthStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoogleOauthStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoogleOauthStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GoogleOauthState mutation op: %q", m.Op())
	}
}

// GoogleOauthTokenClient is a client for the GoogleOauthToken schema.
type GoogleOauthTokenClient struct {
	config
}

// NewGoogleOauthTokenClient returns a client for the GoogleOauthToken from the given config.
func NewGoogleOauthTokenClient(c config) *GoogleOauthTokenClient {
	return &GoogleOauthTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `googleoauthtoken.Hooks(f(g(h())))`.
func (c *GoogleOauthTokenClient) Use(hooks ...Hook) {
	c.hooks.GoogleOauthToken = append(c.hooks.GoogleOauthToken, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `googleoauthtoken.Intercept(f(g(h())))`.
func (c *GoogleOauthTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.GoogleOauthToken = append(c.inters.GoogleOauthToken, interceptors...)
}

// Create returns a builder for creating a GoogleOauthToken entity.
func (c *GoogleOauthTokenClient) Create() *GoogleOauthTokenCreate {
	mutation := newGoogleOauthTokenMutation(c.config, OpCreate)
	return &GoogleOauthTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoogleOauthToken entities.
func (c *GoogleOauthTokenClient) CreateBulk(builders ...*GoogleOauthTokenCreate) *GoogleOauthTokenCreateBulk {
	return &GoogleOauthTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoogleOauthToken.
func (c *GoogleOauthTokenClient) Update() *GoogleOauthTokenUpdate {
	mutation := newGoogleOauthTokenMutation(c.config, OpUpdate)
	return &GoogleOauthTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoogleOauthTokenClient) UpdateOne(got *GoogleOauthToken) *GoogleOauthTokenUpdateOne {
	mutation := newGoogleOauthTokenMutation(c.config, OpUpdateOne, withGoogleOauthToken(got))
	return &GoogleOauthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoogleOauthTokenClient) UpdateOneID(id int) *GoogleOauthTokenUpdateOne {
	mutation := newGoogleOauthTokenMutation(c.config, OpUpdateOne, withGoogleOauthTokenID(id))
	return &GoogleOauthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoogleOauthToken.
func (c *GoogleOauthTokenClient) Delete() *GoogleOauthTokenDelete {
	mutation := newGoogleOauthTokenMutation(c.config, OpDelete)
	return &GoogleOauthTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoogleOauthTokenClient) DeleteOne(got *GoogleOauthToken) *GoogleOauthTokenDeleteOne {
	return c.DeleteOneID(got.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoogleOauthTokenClient) DeleteOneID(id int) *GoogleOauthTokenDeleteOne {
	builder := c.Delete().Where(googleoauthtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoogleOauthTokenDeleteOne{builder}
}

// Query returns a query builder for GoogleOauthToken.
func (c *GoogleOauthTokenClient) Query() *GoogleOauthTokenQuery {
	return &GoogleOauthTokenQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a GoogleOauthToken entity by its id.
func (c *GoogleOauthTokenClient) Get(ctx context.Context, id int) (*GoogleOauthToken, error) {
	return c.Query().Where(googleoauthtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoogleOauthTokenClient) GetX(ctx context.Context, id int) *GoogleOauthToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a GoogleOauthToken.
func (c *GoogleOauthTokenClient) QueryUser(got *GoogleOauthToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := got.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(googleoauthtoken.Table, googleoauthtoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, googleoauthtoken.UserTable, googleoauthtoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(got.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoogleOauthTokenClient) Hooks() []Hook {
	return c.hooks.GoogleOauthToken
}

// Interceptors returns the client interceptors.
func (c *GoogleOauthTokenClient) Interceptors() []Interceptor {
	return c.inters.GoogleOauthToken
}

func (c *GoogleOauthTokenClient) mutate(ctx context.Context, m *GoogleOauthTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoogleOauthTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoogleOauthTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoogleOauthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoogleOauthTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GoogleOauthToken mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Role.
func (c *RoleClient) QueryUsers(r *Role) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.UsersTable, role.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// RyzmEventClient is a client for the RyzmEvent schema.
type RyzmEventClient struct {
	config
}

// NewRyzmEventClient returns a client for the RyzmEvent from the given config.
func NewRyzmEventClient(c config) *RyzmEventClient {
	return &RyzmEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ryzmevent.Hooks(f(g(h())))`.
func (c *RyzmEventClient) Use(hooks ...Hook) {
	c.hooks.RyzmEvent = append(c.hooks.RyzmEvent, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ryzmevent.Intercept(f(g(h())))`.
func (c *RyzmEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.RyzmEvent = append(c.inters.RyzmEvent, interceptors...)
}

// Create returns a builder for creating a RyzmEvent entity.
func (c *RyzmEventClient) Create() *RyzmEventCreate {
	mutation := newRyzmEventMutation(c.config, OpCreate)
	return &RyzmEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RyzmEvent entities.
func (c *RyzmEventClient) CreateBulk(builders ...*RyzmEventCreate) *RyzmEventCreateBulk {
	return &RyzmEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RyzmEvent.
func (c *RyzmEventClient) Update() *RyzmEventUpdate {
	mutation := newRyzmEventMutation(c.config, OpUpdate)
	return &RyzmEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RyzmEventClient) UpdateOne(re *RyzmEvent) *RyzmEventUpdateOne {
	mutation := newRyzmEventMutation(c.config, OpUpdateOne, withRyzmEvent(re))
	return &RyzmEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RyzmEventClient) UpdateOneID(id int) *RyzmEventUpdateOne {
	mutation := newRyzmEventMutation(c.config, OpUpdateOne, withRyzmEventID(id))
	return &RyzmEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RyzmEvent.
func (c *RyzmEventClient) Delete() *RyzmEventDelete {
	mutation := newRyzmEventMutation(c.config, OpDelete)
	return &RyzmEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RyzmEventClient) DeleteOne(re *RyzmEvent) *RyzmEventDeleteOne {
	return c.DeleteOneID(re.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RyzmEventClient) DeleteOneID(id int) *RyzmEventDeleteOne {
	builder := c.Delete().Where(ryzmevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RyzmEventDeleteOne{builder}
}

// Query returns a query builder for RyzmEvent.
func (c *RyzmEventClient) Query() *RyzmEventQuery {
	return &RyzmEventQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a RyzmEvent entity by its id.
func (c *RyzmEventClient) Get(ctx context.Context, id int) (*RyzmEvent, error) {
	return c.Query().Where(ryzmevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RyzmEventClient) GetX(ctx context.Context, id int) *RyzmEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a RyzmEvent.
func (c *RyzmEventClient) QueryEvent(re *RyzmEvent) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := re.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ryzmevent.Table, ryzmevent.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ryzmevent.EventTable, ryzmevent.EventColumn),
		)
		fromV = sqlgraph.Neighbors(re.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RyzmEventClient) Hooks() []Hook {
	return c.hooks.RyzmEvent
}

// Interceptors returns the client interceptors.
func (c *RyzmEventClient) Interceptors() []Interceptor {
	return c.inters.RyzmEvent
}

func (c *RyzmEventClient) mutate(ctx context.Context, m *RyzmEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RyzmEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RyzmEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RyzmEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RyzmEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RyzmEvent mutation op: %q", m.Op())
	}
}

// UnStructuredEventInformationClient is a client for the UnStructuredEventInformation schema.
type UnStructuredEventInformationClient struct {
	config
}

// NewUnStructuredEventInformationClient returns a client for the UnStructuredEventInformation from the given config.
func NewUnStructuredEventInformationClient(c config) *UnStructuredEventInformationClient {
	return &UnStructuredEventInformationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unstructuredeventinformation.Hooks(f(g(h())))`.
func (c *UnStructuredEventInformationClient) Use(hooks ...Hook) {
	c.hooks.UnStructuredEventInformation = append(c.hooks.UnStructuredEventInformation, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `unstructuredeventinformation.Intercept(f(g(h())))`.
func (c *UnStructuredEventInformationClient) Intercept(interceptors ...Interceptor) {
	c.inters.UnStructuredEventInformation = append(c.inters.UnStructuredEventInformation, interceptors...)
}

// Create returns a builder for creating a UnStructuredEventInformation entity.
func (c *UnStructuredEventInformationClient) Create() *UnStructuredEventInformationCreate {
	mutation := newUnStructuredEventInformationMutation(c.config, OpCreate)
	return &UnStructuredEventInformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UnStructuredEventInformation entities.
func (c *UnStructuredEventInformationClient) CreateBulk(builders ...*UnStructuredEventInformationCreate) *UnStructuredEventInformationCreateBulk {
	return &UnStructuredEventInformationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UnStructuredEventInformation.
func (c *UnStructuredEventInformationClient) Update() *UnStructuredEventInformationUpdate {
	mutation := newUnStructuredEventInformationMutation(c.config, OpUpdate)
	return &UnStructuredEventInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnStructuredEventInformationClient) UpdateOne(usei *UnStructuredEventInformation) *UnStructuredEventInformationUpdateOne {
	mutation := newUnStructuredEventInformationMutation(c.config, OpUpdateOne, withUnStructuredEventInformation(usei))
	return &UnStructuredEventInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnStructuredEventInformationClient) UpdateOneID(id int) *UnStructuredEventInformationUpdateOne {
	mutation := newUnStructuredEventInformationMutation(c.config, OpUpdateOne, withUnStructuredEventInformationID(id))
	return &UnStructuredEventInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UnStructuredEventInformation.
func (c *UnStructuredEventInformationClient) Delete() *UnStructuredEventInformationDelete {
	mutation := newUnStructuredEventInformationMutation(c.config, OpDelete)
	return &UnStructuredEventInformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UnStructuredEventInformationClient) DeleteOne(usei *UnStructuredEventInformation) *UnStructuredEventInformationDeleteOne {
	return c.DeleteOneID(usei.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UnStructuredEventInformationClient) DeleteOneID(id int) *UnStructuredEventInformationDeleteOne {
	builder := c.Delete().Where(unstructuredeventinformation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnStructuredEventInformationDeleteOne{builder}
}

// Query returns a query builder for UnStructuredEventInformation.
func (c *UnStructuredEventInformationClient) Query() *UnStructuredEventInformationQuery {
	return &UnStructuredEventInformationQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a UnStructuredEventInformation entity by its id.
func (c *UnStructuredEventInformationClient) Get(ctx context.Context, id int) (*UnStructuredEventInformation, error) {
	return c.Query().Where(unstructuredeventinformation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnStructuredEventInformationClient) GetX(ctx context.Context, id int) *UnStructuredEventInformation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UnStructuredEventInformation.
func (c *UnStructuredEventInformationClient) QueryEvent(usei *UnStructuredEventInformation) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := usei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unstructuredeventinformation.Table, unstructuredeventinformation.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unstructuredeventinformation.EventTable, unstructuredeventinformation.EventColumn),
		)
		fromV = sqlgraph.Neighbors(usei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnStructuredEventInformationClient) Hooks() []Hook {
	return c.hooks.UnStructuredEventInformation
}

// Interceptors returns the client interceptors.
func (c *UnStructuredEventInformationClient) Interceptors() []Interceptor {
	return c.inters.UnStructuredEventInformation
}

func (c *UnStructuredEventInformationClient) mutate(ctx context.Context, m *UnStructuredEventInformationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UnStructuredEventInformationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UnStructuredEventInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UnStructuredEventInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UnStructuredEventInformationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UnStructuredEventInformation mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoogleOauthTokens queries the google_oauth_tokens edge of a User.
func (c *UserClient) QueryGoogleOauthTokens(u *User) *GoogleOauthTokenQuery {
	query := (&GoogleOauthTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(googleoauthtoken.Table, googleoauthtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.GoogleOauthTokensTable, user.GoogleOauthTokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoogleOauthStates queries the google_oauth_states edge of a User.
func (c *UserClient) QueryGoogleOauthStates(u *User) *GoogleOauthStateQuery {
	query := (&GoogleOauthStateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(googleoauthstate.Table, googleoauthstate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.GoogleOauthStatesTable, user.GoogleOauthStatesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a User.
func (c *UserClient) QueryEvents(u *User) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.EventsTable, user.EventsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExternalCalendars queries the external_calendars edge of a User.
func (c *UserClient) QueryExternalCalendars(u *User) *ExternalCalendarQuery {
	query := (&ExternalCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(externalcalendar.Table, externalcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ExternalCalendarsTable, user.ExternalCalendarsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a User.
func (c *UserClient) QueryRoles(u *User) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.RolesTable, user.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VenueClient is a client for the Venue schema.
type VenueClient struct {
	config
}

// NewVenueClient returns a client for the Venue from the given config.
func NewVenueClient(c config) *VenueClient {
	return &VenueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `venue.Hooks(f(g(h())))`.
func (c *VenueClient) Use(hooks ...Hook) {
	c.hooks.Venue = append(c.hooks.Venue, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `venue.Intercept(f(g(h())))`.
func (c *VenueClient) Intercept(interceptors ...Interceptor) {
	c.inters.Venue = append(c.inters.Venue, interceptors...)
}

// Create returns a builder for creating a Venue entity.
func (c *VenueClient) Create() *VenueCreate {
	mutation := newVenueMutation(c.config, OpCreate)
	return &VenueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Venue entities.
func (c *VenueClient) CreateBulk(builders ...*VenueCreate) *VenueCreateBulk {
	return &VenueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Venue.
func (c *VenueClient) Update() *VenueUpdate {
	mutation := newVenueMutation(c.config, OpUpdate)
	return &VenueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VenueClient) UpdateOne(v *Venue) *VenueUpdateOne {
	mutation := newVenueMutation(c.config, OpUpdateOne, withVenue(v))
	return &VenueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VenueClient) UpdateOneID(id int) *VenueUpdateOne {
	mutation := newVenueMutation(c.config, OpUpdateOne, withVenueID(id))
	return &VenueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Venue.
func (c *VenueClient) Delete() *VenueDelete {
	mutation := newVenueMutation(c.config, OpDelete)
	return &VenueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VenueClient) DeleteOne(v *Venue) *VenueDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VenueClient) DeleteOneID(id int) *VenueDeleteOne {
	builder := c.Delete().Where(venue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VenueDeleteOne{builder}
}

// Query returns a query builder for Venue.
func (c *VenueClient) Query() *VenueQuery {
	return &VenueQuery{
		config: c.config,
		inters: c.Interceptors(),
	}
}

// Get returns a Venue entity by its id.
func (c *VenueClient) Get(ctx context.Context, id int) (*Venue, error) {
	return c.Query().Where(venue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VenueClient) GetX(ctx context.Context, id int) *Venue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a Venue.
func (c *VenueClient) QueryEvents(v *Venue) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(venue.Table, venue.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, venue.EventsTable, venue.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VenueClient) Hooks() []Hook {
	return c.hooks.Venue
}

// Interceptors returns the client interceptors.
func (c *VenueClient) Interceptors() []Interceptor {
	return c.inters.Venue
}

func (c *VenueClient) mutate(ctx context.Context, m *VenueMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VenueCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VenueUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VenueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VenueDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Venue mutation op: %q", m.Op())
	}
}
