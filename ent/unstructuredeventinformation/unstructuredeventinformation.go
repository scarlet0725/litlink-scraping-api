// Code generated by ent, DO NOT EDIT.

package unstructuredeventinformation

const (
	// Label holds the string label denoting the unstructuredeventinformation type in the database.
	Label = "un_structured_event_information"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRyzmuuid holds the string denoting the ryzmuuid field in the database.
	FieldRyzmuuid = "ryzmuuid"
	// FieldVenueName holds the string denoting the venue_name field in the database.
	FieldVenueName = "venue_name"
	// FieldArtistName holds the string denoting the artist_name field in the database.
	FieldArtistName = "artist_name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// Table holds the table name of the unstructuredeventinformation in the database.
	Table = "un_structured_event_informations"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "un_structured_event_informations"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_un_structured_event_informations"
)

// Columns holds all SQL columns for unstructuredeventinformation fields.
var Columns = []string{
	FieldID,
	FieldRyzmuuid,
	FieldVenueName,
	FieldArtistName,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "un_structured_event_informations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_un_structured_event_informations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
