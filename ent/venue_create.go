// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/venue"
)

// VenueCreate is the builder for creating a Venue entity.
type VenueCreate struct {
	config
	mutation *VenueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVenueID sets the "venue_id" field.
func (vc *VenueCreate) SetVenueID(s string) *VenueCreate {
	vc.mutation.SetVenueID(s)
	return vc
}

// SetName sets the "name" field.
func (vc *VenueCreate) SetName(s string) *VenueCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetDescription sets the "description" field.
func (vc *VenueCreate) SetDescription(s string) *VenueCreate {
	vc.mutation.SetDescription(s)
	return vc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vc *VenueCreate) SetNillableDescription(s *string) *VenueCreate {
	if s != nil {
		vc.SetDescription(*s)
	}
	return vc
}

// SetWebSite sets the "web_site" field.
func (vc *VenueCreate) SetWebSite(b []byte) *VenueCreate {
	vc.mutation.SetWebSite(b)
	return vc
}

// SetPostcode sets the "postcode" field.
func (vc *VenueCreate) SetPostcode(s string) *VenueCreate {
	vc.mutation.SetPostcode(s)
	return vc
}

// SetNillablePostcode sets the "postcode" field if the given value is not nil.
func (vc *VenueCreate) SetNillablePostcode(s *string) *VenueCreate {
	if s != nil {
		vc.SetPostcode(*s)
	}
	return vc
}

// SetPrefecture sets the "prefecture" field.
func (vc *VenueCreate) SetPrefecture(s string) *VenueCreate {
	vc.mutation.SetPrefecture(s)
	return vc
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (vc *VenueCreate) SetNillablePrefecture(s *string) *VenueCreate {
	if s != nil {
		vc.SetPrefecture(*s)
	}
	return vc
}

// SetCity sets the "city" field.
func (vc *VenueCreate) SetCity(s string) *VenueCreate {
	vc.mutation.SetCity(s)
	return vc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vc *VenueCreate) SetNillableCity(s *string) *VenueCreate {
	if s != nil {
		vc.SetCity(*s)
	}
	return vc
}

// SetStreet sets the "street" field.
func (vc *VenueCreate) SetStreet(s string) *VenueCreate {
	vc.mutation.SetStreet(s)
	return vc
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (vc *VenueCreate) SetNillableStreet(s *string) *VenueCreate {
	if s != nil {
		vc.SetStreet(*s)
	}
	return vc
}

// SetIsOpen sets the "is_open" field.
func (vc *VenueCreate) SetIsOpen(b bool) *VenueCreate {
	vc.mutation.SetIsOpen(b)
	return vc
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (vc *VenueCreate) SetNillableIsOpen(b *bool) *VenueCreate {
	if b != nil {
		vc.SetIsOpen(*b)
	}
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VenueCreate) SetCreatedAt(t time.Time) *VenueCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VenueCreate) SetNillableCreatedAt(t *time.Time) *VenueCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VenueCreate) SetUpdatedAt(t time.Time) *VenueCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VenueCreate) SetNillableUpdatedAt(t *time.Time) *VenueCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *VenueCreate) SetDeletedAt(t time.Time) *VenueCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *VenueCreate) SetNillableDeletedAt(t *time.Time) *VenueCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vc *VenueCreate) AddEventIDs(ids ...int) *VenueCreate {
	vc.mutation.AddEventIDs(ids...)
	return vc
}

// AddEvents adds the "events" edges to the Event entity.
func (vc *VenueCreate) AddEvents(e ...*Event) *VenueCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vc.AddEventIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vc *VenueCreate) Mutation() *VenueMutation {
	return vc.mutation
}

// Save creates the Venue in the database.
func (vc *VenueCreate) Save(ctx context.Context) (*Venue, error) {
	vc.defaults()
	return withHooks[*Venue, VenueMutation](ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VenueCreate) SaveX(ctx context.Context) *Venue {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VenueCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VenueCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VenueCreate) defaults() {
	if _, ok := vc.mutation.IsOpen(); !ok {
		v := venue.DefaultIsOpen
		vc.mutation.SetIsOpen(v)
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := venue.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := venue.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VenueCreate) check() error {
	if _, ok := vc.mutation.VenueID(); !ok {
		return &ValidationError{Name: "venue_id", err: errors.New(`ent: missing required field "Venue.venue_id"`)}
	}
	if v, ok := vc.mutation.VenueID(); ok {
		if err := venue.VenueIDValidator(v); err != nil {
			return &ValidationError{Name: "venue_id", err: fmt.Errorf(`ent: validator failed for field "Venue.venue_id": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Venue.name"`)}
	}
	if v, ok := vc.mutation.Name(); ok {
		if err := venue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Venue.name": %w`, err)}
		}
	}
	if _, ok := vc.mutation.IsOpen(); !ok {
		return &ValidationError{Name: "is_open", err: errors.New(`ent: missing required field "Venue.is_open"`)}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Venue.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Venue.updated_at"`)}
	}
	return nil
}

func (vc *VenueCreate) sqlSave(ctx context.Context) (*Venue, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VenueCreate) createSpec() (*Venue, *sqlgraph.CreateSpec) {
	var (
		_node = &Venue{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: venue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: venue.FieldID,
			},
		}
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.VenueID(); ok {
		_spec.SetField(venue.FieldVenueID, field.TypeString, value)
		_node.VenueID = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(venue.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.Description(); ok {
		_spec.SetField(venue.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := vc.mutation.WebSite(); ok {
		_spec.SetField(venue.FieldWebSite, field.TypeBytes, value)
		_node.WebSite = value
	}
	if value, ok := vc.mutation.Postcode(); ok {
		_spec.SetField(venue.FieldPostcode, field.TypeString, value)
		_node.Postcode = value
	}
	if value, ok := vc.mutation.Prefecture(); ok {
		_spec.SetField(venue.FieldPrefecture, field.TypeString, value)
		_node.Prefecture = value
	}
	if value, ok := vc.mutation.City(); ok {
		_spec.SetField(venue.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := vc.mutation.Street(); ok {
		_spec.SetField(venue.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := vc.mutation.IsOpen(); ok {
		_spec.SetField(venue.FieldIsOpen, field.TypeBool, value)
		_node.IsOpen = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(venue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(venue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(venue.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := vc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   venue.EventsTable,
			Columns: []string{venue.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Venue.Create().
//		SetVenueID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VenueUpsert) {
//			SetVenueID(v+v).
//		}).
//		Exec(ctx)
func (vc *VenueCreate) OnConflict(opts ...sql.ConflictOption) *VenueUpsertOne {
	vc.conflict = opts
	return &VenueUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VenueCreate) OnConflictColumns(columns ...string) *VenueUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VenueUpsertOne{
		create: vc,
	}
}

type (
	// VenueUpsertOne is the builder for "upsert"-ing
	//  one Venue node.
	VenueUpsertOne struct {
		create *VenueCreate
	}

	// VenueUpsert is the "OnConflict" setter.
	VenueUpsert struct {
		*sql.UpdateSet
	}
)

// SetVenueID sets the "venue_id" field.
func (u *VenueUpsert) SetVenueID(v string) *VenueUpsert {
	u.Set(venue.FieldVenueID, v)
	return u
}

// UpdateVenueID sets the "venue_id" field to the value that was provided on create.
func (u *VenueUpsert) UpdateVenueID() *VenueUpsert {
	u.SetExcluded(venue.FieldVenueID)
	return u
}

// SetName sets the "name" field.
func (u *VenueUpsert) SetName(v string) *VenueUpsert {
	u.Set(venue.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VenueUpsert) UpdateName() *VenueUpsert {
	u.SetExcluded(venue.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *VenueUpsert) SetDescription(v string) *VenueUpsert {
	u.Set(venue.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VenueUpsert) UpdateDescription() *VenueUpsert {
	u.SetExcluded(venue.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *VenueUpsert) ClearDescription() *VenueUpsert {
	u.SetNull(venue.FieldDescription)
	return u
}

// SetWebSite sets the "web_site" field.
func (u *VenueUpsert) SetWebSite(v []byte) *VenueUpsert {
	u.Set(venue.FieldWebSite, v)
	return u
}

// UpdateWebSite sets the "web_site" field to the value that was provided on create.
func (u *VenueUpsert) UpdateWebSite() *VenueUpsert {
	u.SetExcluded(venue.FieldWebSite)
	return u
}

// ClearWebSite clears the value of the "web_site" field.
func (u *VenueUpsert) ClearWebSite() *VenueUpsert {
	u.SetNull(venue.FieldWebSite)
	return u
}

// SetPostcode sets the "postcode" field.
func (u *VenueUpsert) SetPostcode(v string) *VenueUpsert {
	u.Set(venue.FieldPostcode, v)
	return u
}

// UpdatePostcode sets the "postcode" field to the value that was provided on create.
func (u *VenueUpsert) UpdatePostcode() *VenueUpsert {
	u.SetExcluded(venue.FieldPostcode)
	return u
}

// ClearPostcode clears the value of the "postcode" field.
func (u *VenueUpsert) ClearPostcode() *VenueUpsert {
	u.SetNull(venue.FieldPostcode)
	return u
}

// SetPrefecture sets the "prefecture" field.
func (u *VenueUpsert) SetPrefecture(v string) *VenueUpsert {
	u.Set(venue.FieldPrefecture, v)
	return u
}

// UpdatePrefecture sets the "prefecture" field to the value that was provided on create.
func (u *VenueUpsert) UpdatePrefecture() *VenueUpsert {
	u.SetExcluded(venue.FieldPrefecture)
	return u
}

// ClearPrefecture clears the value of the "prefecture" field.
func (u *VenueUpsert) ClearPrefecture() *VenueUpsert {
	u.SetNull(venue.FieldPrefecture)
	return u
}

// SetCity sets the "city" field.
func (u *VenueUpsert) SetCity(v string) *VenueUpsert {
	u.Set(venue.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *VenueUpsert) UpdateCity() *VenueUpsert {
	u.SetExcluded(venue.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *VenueUpsert) ClearCity() *VenueUpsert {
	u.SetNull(venue.FieldCity)
	return u
}

// SetStreet sets the "street" field.
func (u *VenueUpsert) SetStreet(v string) *VenueUpsert {
	u.Set(venue.FieldStreet, v)
	return u
}

// UpdateStreet sets the "street" field to the value that was provided on create.
func (u *VenueUpsert) UpdateStreet() *VenueUpsert {
	u.SetExcluded(venue.FieldStreet)
	return u
}

// ClearStreet clears the value of the "street" field.
func (u *VenueUpsert) ClearStreet() *VenueUpsert {
	u.SetNull(venue.FieldStreet)
	return u
}

// SetIsOpen sets the "is_open" field.
func (u *VenueUpsert) SetIsOpen(v bool) *VenueUpsert {
	u.Set(venue.FieldIsOpen, v)
	return u
}

// UpdateIsOpen sets the "is_open" field to the value that was provided on create.
func (u *VenueUpsert) UpdateIsOpen() *VenueUpsert {
	u.SetExcluded(venue.FieldIsOpen)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VenueUpsert) SetUpdatedAt(v time.Time) *VenueUpsert {
	u.Set(venue.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VenueUpsert) UpdateUpdatedAt() *VenueUpsert {
	u.SetExcluded(venue.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VenueUpsert) SetDeletedAt(v time.Time) *VenueUpsert {
	u.Set(venue.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VenueUpsert) UpdateDeletedAt() *VenueUpsert {
	u.SetExcluded(venue.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *VenueUpsert) ClearDeletedAt() *VenueUpsert {
	u.SetNull(venue.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VenueUpsertOne) UpdateNewValues() *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(venue.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Venue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VenueUpsertOne) Ignore() *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VenueUpsertOne) DoNothing() *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VenueCreate.OnConflict
// documentation for more info.
func (u *VenueUpsertOne) Update(set func(*VenueUpsert)) *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VenueUpsert{UpdateSet: update})
	}))
	return u
}

// SetVenueID sets the "venue_id" field.
func (u *VenueUpsertOne) SetVenueID(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetVenueID(v)
	})
}

// UpdateVenueID sets the "venue_id" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateVenueID() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateVenueID()
	})
}

// SetName sets the "name" field.
func (u *VenueUpsertOne) SetName(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateName() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *VenueUpsertOne) SetDescription(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateDescription() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VenueUpsertOne) ClearDescription() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearDescription()
	})
}

// SetWebSite sets the "web_site" field.
func (u *VenueUpsertOne) SetWebSite(v []byte) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetWebSite(v)
	})
}

// UpdateWebSite sets the "web_site" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateWebSite() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateWebSite()
	})
}

// ClearWebSite clears the value of the "web_site" field.
func (u *VenueUpsertOne) ClearWebSite() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearWebSite()
	})
}

// SetPostcode sets the "postcode" field.
func (u *VenueUpsertOne) SetPostcode(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetPostcode(v)
	})
}

// UpdatePostcode sets the "postcode" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdatePostcode() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdatePostcode()
	})
}

// ClearPostcode clears the value of the "postcode" field.
func (u *VenueUpsertOne) ClearPostcode() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearPostcode()
	})
}

// SetPrefecture sets the "prefecture" field.
func (u *VenueUpsertOne) SetPrefecture(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetPrefecture(v)
	})
}

// UpdatePrefecture sets the "prefecture" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdatePrefecture() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdatePrefecture()
	})
}

// ClearPrefecture clears the value of the "prefecture" field.
func (u *VenueUpsertOne) ClearPrefecture() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearPrefecture()
	})
}

// SetCity sets the "city" field.
func (u *VenueUpsertOne) SetCity(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateCity() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *VenueUpsertOne) ClearCity() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearCity()
	})
}

// SetStreet sets the "street" field.
func (u *VenueUpsertOne) SetStreet(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetStreet(v)
	})
}

// UpdateStreet sets the "street" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateStreet() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateStreet()
	})
}

// ClearStreet clears the value of the "street" field.
func (u *VenueUpsertOne) ClearStreet() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearStreet()
	})
}

// SetIsOpen sets the "is_open" field.
func (u *VenueUpsertOne) SetIsOpen(v bool) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetIsOpen(v)
	})
}

// UpdateIsOpen sets the "is_open" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateIsOpen() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateIsOpen()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VenueUpsertOne) SetUpdatedAt(v time.Time) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateUpdatedAt() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VenueUpsertOne) SetDeletedAt(v time.Time) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateDeletedAt() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *VenueUpsertOne) ClearDeletedAt() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *VenueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VenueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VenueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VenueUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VenueUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VenueCreateBulk is the builder for creating many Venue entities in bulk.
type VenueCreateBulk struct {
	config
	builders []*VenueCreate
	conflict []sql.ConflictOption
}

// Save creates the Venue entities in the database.
func (vcb *VenueCreateBulk) Save(ctx context.Context) ([]*Venue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Venue, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VenueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VenueCreateBulk) SaveX(ctx context.Context) []*Venue {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VenueCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VenueCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Venue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VenueUpsert) {
//			SetVenueID(v+v).
//		}).
//		Exec(ctx)
func (vcb *VenueCreateBulk) OnConflict(opts ...sql.ConflictOption) *VenueUpsertBulk {
	vcb.conflict = opts
	return &VenueUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VenueCreateBulk) OnConflictColumns(columns ...string) *VenueUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VenueUpsertBulk{
		create: vcb,
	}
}

// VenueUpsertBulk is the builder for "upsert"-ing
// a bulk of Venue nodes.
type VenueUpsertBulk struct {
	create *VenueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VenueUpsertBulk) UpdateNewValues() *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(venue.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VenueUpsertBulk) Ignore() *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VenueUpsertBulk) DoNothing() *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VenueCreateBulk.OnConflict
// documentation for more info.
func (u *VenueUpsertBulk) Update(set func(*VenueUpsert)) *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VenueUpsert{UpdateSet: update})
	}))
	return u
}

// SetVenueID sets the "venue_id" field.
func (u *VenueUpsertBulk) SetVenueID(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetVenueID(v)
	})
}

// UpdateVenueID sets the "venue_id" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateVenueID() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateVenueID()
	})
}

// SetName sets the "name" field.
func (u *VenueUpsertBulk) SetName(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateName() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *VenueUpsertBulk) SetDescription(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateDescription() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VenueUpsertBulk) ClearDescription() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearDescription()
	})
}

// SetWebSite sets the "web_site" field.
func (u *VenueUpsertBulk) SetWebSite(v []byte) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetWebSite(v)
	})
}

// UpdateWebSite sets the "web_site" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateWebSite() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateWebSite()
	})
}

// ClearWebSite clears the value of the "web_site" field.
func (u *VenueUpsertBulk) ClearWebSite() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearWebSite()
	})
}

// SetPostcode sets the "postcode" field.
func (u *VenueUpsertBulk) SetPostcode(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetPostcode(v)
	})
}

// UpdatePostcode sets the "postcode" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdatePostcode() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdatePostcode()
	})
}

// ClearPostcode clears the value of the "postcode" field.
func (u *VenueUpsertBulk) ClearPostcode() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearPostcode()
	})
}

// SetPrefecture sets the "prefecture" field.
func (u *VenueUpsertBulk) SetPrefecture(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetPrefecture(v)
	})
}

// UpdatePrefecture sets the "prefecture" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdatePrefecture() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdatePrefecture()
	})
}

// ClearPrefecture clears the value of the "prefecture" field.
func (u *VenueUpsertBulk) ClearPrefecture() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearPrefecture()
	})
}

// SetCity sets the "city" field.
func (u *VenueUpsertBulk) SetCity(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateCity() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *VenueUpsertBulk) ClearCity() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearCity()
	})
}

// SetStreet sets the "street" field.
func (u *VenueUpsertBulk) SetStreet(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetStreet(v)
	})
}

// UpdateStreet sets the "street" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateStreet() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateStreet()
	})
}

// ClearStreet clears the value of the "street" field.
func (u *VenueUpsertBulk) ClearStreet() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearStreet()
	})
}

// SetIsOpen sets the "is_open" field.
func (u *VenueUpsertBulk) SetIsOpen(v bool) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetIsOpen(v)
	})
}

// UpdateIsOpen sets the "is_open" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateIsOpen() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateIsOpen()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VenueUpsertBulk) SetUpdatedAt(v time.Time) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateUpdatedAt() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VenueUpsertBulk) SetDeletedAt(v time.Time) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateDeletedAt() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *VenueUpsertBulk) ClearDeletedAt() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *VenueUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VenueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VenueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VenueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
