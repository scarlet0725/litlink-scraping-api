// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArtistsColumns holds the columns for the "artists" table.
	ArtistsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "artist_id", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "varchar(191)"}},
		{Name: "name", Type: field.TypeString, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "url", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
	}
	// ArtistsTable holds the schema information for the "artists" table.
	ArtistsTable = &schema.Table{
		Name:       "artists",
		Columns:    ArtistsColumns,
		PrimaryKey: []*schema.Column{ArtistsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "artist_artist_id",
				Unique:  true,
				Columns: []*schema.Column{ArtistsColumns[1]},
			},
			{
				Name:    "artist_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{ArtistsColumns[6]},
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "event_id", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "varchar(191)"}},
		{Name: "name", Type: field.TypeString, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "date", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "open_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "start_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "end_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_bin", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "url", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_bin", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "ticket_url", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_bin", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "event_venue", Type: field.TypeInt, Nullable: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_venues_venue",
				Columns:    []*schema.Column{EventsColumns[13]},
				RefColumns: []*schema.Column{VenuesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "event_event_id",
				Unique:  true,
				Columns: []*schema.Column{EventsColumns[1]},
			},
			{
				Name:    "event_date_open_time_start_time_end_time",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[3], EventsColumns[4], EventsColumns[5], EventsColumns[6]},
			},
		},
	}
	// ExternalCalendarsColumns holds the columns for the "external_calendars" table.
	ExternalCalendarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "description", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_bin", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "calendar_id", Type: field.TypeString, Collation: "utf8mb4_bin"},
		{Name: "source_type", Type: field.TypeString, Collation: "utf8mb4_bin"},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "user_id", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// ExternalCalendarsTable holds the schema information for the "external_calendars" table.
	ExternalCalendarsTable = &schema.Table{
		Name:       "external_calendars",
		Columns:    ExternalCalendarsColumns,
		PrimaryKey: []*schema.Column{ExternalCalendarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "external_calendars_users_external_calendars",
				Columns:    []*schema.Column{ExternalCalendarsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GoogleOauthTokensColumns holds the columns for the "google_oauth_tokens" table.
	GoogleOauthTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "refresh_token", Type: field.TypeString, SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "access_token", Type: field.TypeString, SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "expiry", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "user_id", Type: field.TypeInt, Unique: true},
	}
	// GoogleOauthTokensTable holds the schema information for the "google_oauth_tokens" table.
	GoogleOauthTokensTable = &schema.Table{
		Name:       "google_oauth_tokens",
		Columns:    GoogleOauthTokensColumns,
		PrimaryKey: []*schema.Column{GoogleOauthTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "google_oauth_tokens_users_google_oauth_tokens",
				Columns:    []*schema.Column{GoogleOauthTokensColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "role_id", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "username", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci"},
		{Name: "email", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "varchar(191)"}},
		{Name: "password", Type: field.TypeBytes, SchemaType: map[string]string{"mysql": "longblob"}},
		{Name: "first_name", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "last_name", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "is_admin_verified", Type: field.TypeBool, Default: false},
		{Name: "delete_protected", Type: field.TypeBool, Default: false},
		{Name: "api_key", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "varchar(128)"}},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_user_id_username_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[1], UsersColumns[2], UsersColumns[3]},
			},
			{
				Name:    "user_deleted_at_api_key",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[12], UsersColumns[9]},
			},
		},
	}
	// VenuesColumns holds the columns for the "venues" table.
	VenuesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "venue_id", Type: field.TypeString, Unique: true, Collation: "utf8mb4_0900_ai_ci", SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "name", Type: field.TypeString, Collation: "utf8mb4_ja_0900_as_cs_ks"},
		{Name: "description", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_bin", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "web_site", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "postcode", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "varchar(8)"}},
		{Name: "prefecture", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "city", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "street", Type: field.TypeString, Nullable: true, Collation: "utf8mb4_ja_0900_as_cs_ks", SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "is_open", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(3)"}},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime(3)"}},
	}
	// VenuesTable holds the schema information for the "venues" table.
	VenuesTable = &schema.Table{
		Name:       "venues",
		Columns:    VenuesColumns,
		PrimaryKey: []*schema.Column{VenuesColumns[0]},
	}
	// EventArtistsColumns holds the columns for the "event_artists" table.
	EventArtistsColumns = []*schema.Column{
		{Name: "event_id", Type: field.TypeInt},
		{Name: "artist_id", Type: field.TypeInt},
	}
	// EventArtistsTable holds the schema information for the "event_artists" table.
	EventArtistsTable = &schema.Table{
		Name:       "event_artists",
		Columns:    EventArtistsColumns,
		PrimaryKey: []*schema.Column{EventArtistsColumns[0], EventArtistsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_artists_event_id",
				Columns:    []*schema.Column{EventArtistsColumns[0]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "event_artists_artist_id",
				Columns:    []*schema.Column{EventArtistsColumns[1]},
				RefColumns: []*schema.Column{ArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserEventsColumns holds the columns for the "user_events" table.
	UserEventsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "event_id", Type: field.TypeInt},
	}
	// UserEventsTable holds the schema information for the "user_events" table.
	UserEventsTable = &schema.Table{
		Name:       "user_events",
		Columns:    UserEventsColumns,
		PrimaryKey: []*schema.Column{UserEventsColumns[0], UserEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_events_user_id",
				Columns:    []*schema.Column{UserEventsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_events_event_id",
				Columns:    []*schema.Column{UserEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "role_id", Type: field.TypeInt},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0], UserRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_user_id",
				Columns:    []*schema.Column{UserRolesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_roles_role_id",
				Columns:    []*schema.Column{UserRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArtistsTable,
		EventsTable,
		ExternalCalendarsTable,
		GoogleOauthTokensTable,
		RolesTable,
		UsersTable,
		VenuesTable,
		EventArtistsTable,
		UserEventsTable,
		UserRolesTable,
	}
)

func init() {
	ArtistsTable.Annotation = &entsql.Annotation{
		Table:   "artists",
		Charset: "utf8mb4",
	}
	EventsTable.ForeignKeys[0].RefTable = VenuesTable
	EventsTable.Annotation = &entsql.Annotation{
		Table:   "events",
		Charset: "utf8mb4",
	}
	ExternalCalendarsTable.ForeignKeys[0].RefTable = UsersTable
	ExternalCalendarsTable.Annotation = &entsql.Annotation{
		Table:   "external_calendars",
		Charset: "utf8mb4",
	}
	GoogleOauthTokensTable.ForeignKeys[0].RefTable = UsersTable
	GoogleOauthTokensTable.Annotation = &entsql.Annotation{
		Table:   "google_oauth_tokens",
		Charset: "utf8mb4",
	}
	RolesTable.Annotation = &entsql.Annotation{
		Table:   "roles",
		Charset: "utf8mb4",
	}
	UsersTable.Annotation = &entsql.Annotation{
		Table:   "users",
		Charset: "utf8mb4",
	}
	VenuesTable.Annotation = &entsql.Annotation{
		Table:   "venues",
		Charset: "utf8mb4",
	}
	EventArtistsTable.ForeignKeys[0].RefTable = EventsTable
	EventArtistsTable.ForeignKeys[1].RefTable = ArtistsTable
	UserEventsTable.ForeignKeys[0].RefTable = UsersTable
	UserEventsTable.ForeignKeys[1].RefTable = EventsTable
	UserRolesTable.ForeignKeys[0].RefTable = UsersTable
	UserRolesTable.ForeignKeys[1].RefTable = RolesTable
}
