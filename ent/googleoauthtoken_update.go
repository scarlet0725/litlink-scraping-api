// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/googleoauthtoken"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/user"
)

// GoogleOauthTokenUpdate is the builder for updating GoogleOauthToken entities.
type GoogleOauthTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *GoogleOauthTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoogleOauthTokenUpdate builder.
func (gotu *GoogleOauthTokenUpdate) Where(ps ...predicate.GoogleOauthToken) *GoogleOauthTokenUpdate {
	gotu.mutation.Where(ps...)
	return gotu
}

// SetRefreshToken sets the "refresh_token" field.
func (gotu *GoogleOauthTokenUpdate) SetRefreshToken(s string) *GoogleOauthTokenUpdate {
	gotu.mutation.SetRefreshToken(s)
	return gotu
}

// SetAccessToken sets the "access_token" field.
func (gotu *GoogleOauthTokenUpdate) SetAccessToken(s string) *GoogleOauthTokenUpdate {
	gotu.mutation.SetAccessToken(s)
	return gotu
}

// SetExpiry sets the "expiry" field.
func (gotu *GoogleOauthTokenUpdate) SetExpiry(t time.Time) *GoogleOauthTokenUpdate {
	gotu.mutation.SetExpiry(t)
	return gotu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gotu *GoogleOauthTokenUpdate) SetUserID(id int) *GoogleOauthTokenUpdate {
	gotu.mutation.SetUserID(id)
	return gotu
}

// SetUser sets the "user" edge to the User entity.
func (gotu *GoogleOauthTokenUpdate) SetUser(u *User) *GoogleOauthTokenUpdate {
	return gotu.SetUserID(u.ID)
}

// Mutation returns the GoogleOauthTokenMutation object of the builder.
func (gotu *GoogleOauthTokenUpdate) Mutation() *GoogleOauthTokenMutation {
	return gotu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gotu *GoogleOauthTokenUpdate) ClearUser() *GoogleOauthTokenUpdate {
	gotu.mutation.ClearUser()
	return gotu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gotu *GoogleOauthTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GoogleOauthTokenMutation](ctx, gotu.sqlSave, gotu.mutation, gotu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gotu *GoogleOauthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := gotu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gotu *GoogleOauthTokenUpdate) Exec(ctx context.Context) error {
	_, err := gotu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gotu *GoogleOauthTokenUpdate) ExecX(ctx context.Context) {
	if err := gotu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gotu *GoogleOauthTokenUpdate) check() error {
	if _, ok := gotu.mutation.UserID(); gotu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleOauthToken.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gotu *GoogleOauthTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoogleOauthTokenUpdate {
	gotu.modifiers = append(gotu.modifiers, modifiers...)
	return gotu
}

func (gotu *GoogleOauthTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gotu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(googleoauthtoken.Table, googleoauthtoken.Columns, sqlgraph.NewFieldSpec(googleoauthtoken.FieldID, field.TypeInt))
	if ps := gotu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gotu.mutation.RefreshToken(); ok {
		_spec.SetField(googleoauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := gotu.mutation.AccessToken(); ok {
		_spec.SetField(googleoauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := gotu.mutation.Expiry(); ok {
		_spec.SetField(googleoauthtoken.FieldExpiry, field.TypeTime, value)
	}
	if gotu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthtoken.UserTable,
			Columns: []string{googleoauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gotu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthtoken.UserTable,
			Columns: []string{googleoauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gotu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gotu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleoauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gotu.mutation.done = true
	return n, nil
}

// GoogleOauthTokenUpdateOne is the builder for updating a single GoogleOauthToken entity.
type GoogleOauthTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoogleOauthTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRefreshToken sets the "refresh_token" field.
func (gotuo *GoogleOauthTokenUpdateOne) SetRefreshToken(s string) *GoogleOauthTokenUpdateOne {
	gotuo.mutation.SetRefreshToken(s)
	return gotuo
}

// SetAccessToken sets the "access_token" field.
func (gotuo *GoogleOauthTokenUpdateOne) SetAccessToken(s string) *GoogleOauthTokenUpdateOne {
	gotuo.mutation.SetAccessToken(s)
	return gotuo
}

// SetExpiry sets the "expiry" field.
func (gotuo *GoogleOauthTokenUpdateOne) SetExpiry(t time.Time) *GoogleOauthTokenUpdateOne {
	gotuo.mutation.SetExpiry(t)
	return gotuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gotuo *GoogleOauthTokenUpdateOne) SetUserID(id int) *GoogleOauthTokenUpdateOne {
	gotuo.mutation.SetUserID(id)
	return gotuo
}

// SetUser sets the "user" edge to the User entity.
func (gotuo *GoogleOauthTokenUpdateOne) SetUser(u *User) *GoogleOauthTokenUpdateOne {
	return gotuo.SetUserID(u.ID)
}

// Mutation returns the GoogleOauthTokenMutation object of the builder.
func (gotuo *GoogleOauthTokenUpdateOne) Mutation() *GoogleOauthTokenMutation {
	return gotuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gotuo *GoogleOauthTokenUpdateOne) ClearUser() *GoogleOauthTokenUpdateOne {
	gotuo.mutation.ClearUser()
	return gotuo
}

// Where appends a list predicates to the GoogleOauthTokenUpdate builder.
func (gotuo *GoogleOauthTokenUpdateOne) Where(ps ...predicate.GoogleOauthToken) *GoogleOauthTokenUpdateOne {
	gotuo.mutation.Where(ps...)
	return gotuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gotuo *GoogleOauthTokenUpdateOne) Select(field string, fields ...string) *GoogleOauthTokenUpdateOne {
	gotuo.fields = append([]string{field}, fields...)
	return gotuo
}

// Save executes the query and returns the updated GoogleOauthToken entity.
func (gotuo *GoogleOauthTokenUpdateOne) Save(ctx context.Context) (*GoogleOauthToken, error) {
	return withHooks[*GoogleOauthToken, GoogleOauthTokenMutation](ctx, gotuo.sqlSave, gotuo.mutation, gotuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gotuo *GoogleOauthTokenUpdateOne) SaveX(ctx context.Context) *GoogleOauthToken {
	node, err := gotuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gotuo *GoogleOauthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := gotuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gotuo *GoogleOauthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := gotuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gotuo *GoogleOauthTokenUpdateOne) check() error {
	if _, ok := gotuo.mutation.UserID(); gotuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleOauthToken.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gotuo *GoogleOauthTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoogleOauthTokenUpdateOne {
	gotuo.modifiers = append(gotuo.modifiers, modifiers...)
	return gotuo
}

func (gotuo *GoogleOauthTokenUpdateOne) sqlSave(ctx context.Context) (_node *GoogleOauthToken, err error) {
	if err := gotuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(googleoauthtoken.Table, googleoauthtoken.Columns, sqlgraph.NewFieldSpec(googleoauthtoken.FieldID, field.TypeInt))
	id, ok := gotuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoogleOauthToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gotuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, googleoauthtoken.FieldID)
		for _, f := range fields {
			if !googleoauthtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != googleoauthtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gotuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gotuo.mutation.RefreshToken(); ok {
		_spec.SetField(googleoauthtoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := gotuo.mutation.AccessToken(); ok {
		_spec.SetField(googleoauthtoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := gotuo.mutation.Expiry(); ok {
		_spec.SetField(googleoauthtoken.FieldExpiry, field.TypeTime, value)
	}
	if gotuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthtoken.UserTable,
			Columns: []string{googleoauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gotuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthtoken.UserTable,
			Columns: []string{googleoauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gotuo.modifiers...)
	_node = &GoogleOauthToken{config: gotuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gotuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleoauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gotuo.mutation.done = true
	return _node, nil
}
