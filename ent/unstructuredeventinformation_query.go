// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/unstructuredeventinformation"
)

// UnStructuredEventInformationQuery is the builder for querying UnStructuredEventInformation entities.
type UnStructuredEventInformationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	inters     []Interceptor
	predicates []predicate.UnStructuredEventInformation
	withEvent  *EventQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UnStructuredEventInformationQuery builder.
func (useiq *UnStructuredEventInformationQuery) Where(ps ...predicate.UnStructuredEventInformation) *UnStructuredEventInformationQuery {
	useiq.predicates = append(useiq.predicates, ps...)
	return useiq
}

// Limit the number of records to be returned by this query.
func (useiq *UnStructuredEventInformationQuery) Limit(limit int) *UnStructuredEventInformationQuery {
	useiq.limit = &limit
	return useiq
}

// Offset to start from.
func (useiq *UnStructuredEventInformationQuery) Offset(offset int) *UnStructuredEventInformationQuery {
	useiq.offset = &offset
	return useiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (useiq *UnStructuredEventInformationQuery) Unique(unique bool) *UnStructuredEventInformationQuery {
	useiq.unique = &unique
	return useiq
}

// Order specifies how the records should be ordered.
func (useiq *UnStructuredEventInformationQuery) Order(o ...OrderFunc) *UnStructuredEventInformationQuery {
	useiq.order = append(useiq.order, o...)
	return useiq
}

// QueryEvent chains the current query on the "event" edge.
func (useiq *UnStructuredEventInformationQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: useiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := useiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := useiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(unstructuredeventinformation.Table, unstructuredeventinformation.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unstructuredeventinformation.EventTable, unstructuredeventinformation.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(useiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UnStructuredEventInformation entity from the query.
// Returns a *NotFoundError when no UnStructuredEventInformation was found.
func (useiq *UnStructuredEventInformationQuery) First(ctx context.Context) (*UnStructuredEventInformation, error) {
	nodes, err := useiq.Limit(1).All(newQueryContext(ctx, TypeUnStructuredEventInformation, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{unstructuredeventinformation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) FirstX(ctx context.Context) *UnStructuredEventInformation {
	node, err := useiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UnStructuredEventInformation ID from the query.
// Returns a *NotFoundError when no UnStructuredEventInformation ID was found.
func (useiq *UnStructuredEventInformationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = useiq.Limit(1).IDs(newQueryContext(ctx, TypeUnStructuredEventInformation, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{unstructuredeventinformation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) FirstIDX(ctx context.Context) int {
	id, err := useiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UnStructuredEventInformation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UnStructuredEventInformation entity is found.
// Returns a *NotFoundError when no UnStructuredEventInformation entities are found.
func (useiq *UnStructuredEventInformationQuery) Only(ctx context.Context) (*UnStructuredEventInformation, error) {
	nodes, err := useiq.Limit(2).All(newQueryContext(ctx, TypeUnStructuredEventInformation, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{unstructuredeventinformation.Label}
	default:
		return nil, &NotSingularError{unstructuredeventinformation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) OnlyX(ctx context.Context) *UnStructuredEventInformation {
	node, err := useiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UnStructuredEventInformation ID in the query.
// Returns a *NotSingularError when more than one UnStructuredEventInformation ID is found.
// Returns a *NotFoundError when no entities are found.
func (useiq *UnStructuredEventInformationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = useiq.Limit(2).IDs(newQueryContext(ctx, TypeUnStructuredEventInformation, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{unstructuredeventinformation.Label}
	default:
		err = &NotSingularError{unstructuredeventinformation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) OnlyIDX(ctx context.Context) int {
	id, err := useiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UnStructuredEventInformations.
func (useiq *UnStructuredEventInformationQuery) All(ctx context.Context) ([]*UnStructuredEventInformation, error) {
	ctx = newQueryContext(ctx, TypeUnStructuredEventInformation, "All")
	if err := useiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UnStructuredEventInformation, *UnStructuredEventInformationQuery]()
	return withInterceptors[[]*UnStructuredEventInformation](ctx, useiq, qr, useiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) AllX(ctx context.Context) []*UnStructuredEventInformation {
	nodes, err := useiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UnStructuredEventInformation IDs.
func (useiq *UnStructuredEventInformationQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeUnStructuredEventInformation, "IDs")
	if err := useiq.Select(unstructuredeventinformation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) IDsX(ctx context.Context) []int {
	ids, err := useiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (useiq *UnStructuredEventInformationQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeUnStructuredEventInformation, "Count")
	if err := useiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, useiq, querierCount[*UnStructuredEventInformationQuery](), useiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) CountX(ctx context.Context) int {
	count, err := useiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (useiq *UnStructuredEventInformationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeUnStructuredEventInformation, "Exist")
	switch _, err := useiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (useiq *UnStructuredEventInformationQuery) ExistX(ctx context.Context) bool {
	exist, err := useiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UnStructuredEventInformationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (useiq *UnStructuredEventInformationQuery) Clone() *UnStructuredEventInformationQuery {
	if useiq == nil {
		return nil
	}
	return &UnStructuredEventInformationQuery{
		config:     useiq.config,
		limit:      useiq.limit,
		offset:     useiq.offset,
		order:      append([]OrderFunc{}, useiq.order...),
		inters:     append([]Interceptor{}, useiq.inters...),
		predicates: append([]predicate.UnStructuredEventInformation{}, useiq.predicates...),
		withEvent:  useiq.withEvent.Clone(),
		// clone intermediate query.
		sql:    useiq.sql.Clone(),
		path:   useiq.path,
		unique: useiq.unique,
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (useiq *UnStructuredEventInformationQuery) WithEvent(opts ...func(*EventQuery)) *UnStructuredEventInformationQuery {
	query := (&EventClient{config: useiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	useiq.withEvent = query
	return useiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Ryzmuuid string `json:"ryzmuuid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UnStructuredEventInformation.Query().
//		GroupBy(unstructuredeventinformation.FieldRyzmuuid).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (useiq *UnStructuredEventInformationQuery) GroupBy(field string, fields ...string) *UnStructuredEventInformationGroupBy {
	useiq.fields = append([]string{field}, fields...)
	grbuild := &UnStructuredEventInformationGroupBy{build: useiq}
	grbuild.flds = &useiq.fields
	grbuild.label = unstructuredeventinformation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Ryzmuuid string `json:"ryzmuuid,omitempty"`
//	}
//
//	client.UnStructuredEventInformation.Query().
//		Select(unstructuredeventinformation.FieldRyzmuuid).
//		Scan(ctx, &v)
func (useiq *UnStructuredEventInformationQuery) Select(fields ...string) *UnStructuredEventInformationSelect {
	useiq.fields = append(useiq.fields, fields...)
	sbuild := &UnStructuredEventInformationSelect{UnStructuredEventInformationQuery: useiq}
	sbuild.label = unstructuredeventinformation.Label
	sbuild.flds, sbuild.scan = &useiq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UnStructuredEventInformationSelect configured with the given aggregations.
func (useiq *UnStructuredEventInformationQuery) Aggregate(fns ...AggregateFunc) *UnStructuredEventInformationSelect {
	return useiq.Select().Aggregate(fns...)
}

func (useiq *UnStructuredEventInformationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range useiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, useiq); err != nil {
				return err
			}
		}
	}
	for _, f := range useiq.fields {
		if !unstructuredeventinformation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if useiq.path != nil {
		prev, err := useiq.path(ctx)
		if err != nil {
			return err
		}
		useiq.sql = prev
	}
	return nil
}

func (useiq *UnStructuredEventInformationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UnStructuredEventInformation, error) {
	var (
		nodes       = []*UnStructuredEventInformation{}
		withFKs     = useiq.withFKs
		_spec       = useiq.querySpec()
		loadedTypes = [1]bool{
			useiq.withEvent != nil,
		}
	)
	if useiq.withEvent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, unstructuredeventinformation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UnStructuredEventInformation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UnStructuredEventInformation{config: useiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(useiq.modifiers) > 0 {
		_spec.Modifiers = useiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, useiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := useiq.withEvent; query != nil {
		if err := useiq.loadEvent(ctx, query, nodes, nil,
			func(n *UnStructuredEventInformation, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (useiq *UnStructuredEventInformationQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*UnStructuredEventInformation, init func(*UnStructuredEventInformation), assign func(*UnStructuredEventInformation, *Event)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UnStructuredEventInformation)
	for i := range nodes {
		if nodes[i].event_un_structured_event_informations == nil {
			continue
		}
		fk := *nodes[i].event_un_structured_event_informations
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_un_structured_event_informations" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (useiq *UnStructuredEventInformationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := useiq.querySpec()
	if len(useiq.modifiers) > 0 {
		_spec.Modifiers = useiq.modifiers
	}
	_spec.Node.Columns = useiq.fields
	if len(useiq.fields) > 0 {
		_spec.Unique = useiq.unique != nil && *useiq.unique
	}
	return sqlgraph.CountNodes(ctx, useiq.driver, _spec)
}

func (useiq *UnStructuredEventInformationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unstructuredeventinformation.Table,
			Columns: unstructuredeventinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unstructuredeventinformation.FieldID,
			},
		},
		From:   useiq.sql,
		Unique: true,
	}
	if unique := useiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := useiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unstructuredeventinformation.FieldID)
		for i := range fields {
			if fields[i] != unstructuredeventinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := useiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := useiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := useiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := useiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (useiq *UnStructuredEventInformationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(useiq.driver.Dialect())
	t1 := builder.Table(unstructuredeventinformation.Table)
	columns := useiq.fields
	if len(columns) == 0 {
		columns = unstructuredeventinformation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if useiq.sql != nil {
		selector = useiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if useiq.unique != nil && *useiq.unique {
		selector.Distinct()
	}
	for _, m := range useiq.modifiers {
		m(selector)
	}
	for _, p := range useiq.predicates {
		p(selector)
	}
	for _, p := range useiq.order {
		p(selector)
	}
	if offset := useiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := useiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (useiq *UnStructuredEventInformationQuery) Modify(modifiers ...func(s *sql.Selector)) *UnStructuredEventInformationSelect {
	useiq.modifiers = append(useiq.modifiers, modifiers...)
	return useiq.Select()
}

// UnStructuredEventInformationGroupBy is the group-by builder for UnStructuredEventInformation entities.
type UnStructuredEventInformationGroupBy struct {
	selector
	build *UnStructuredEventInformationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (useigb *UnStructuredEventInformationGroupBy) Aggregate(fns ...AggregateFunc) *UnStructuredEventInformationGroupBy {
	useigb.fns = append(useigb.fns, fns...)
	return useigb
}

// Scan applies the selector query and scans the result into the given value.
func (useigb *UnStructuredEventInformationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeUnStructuredEventInformation, "GroupBy")
	if err := useigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UnStructuredEventInformationQuery, *UnStructuredEventInformationGroupBy](ctx, useigb.build, useigb, useigb.build.inters, v)
}

func (useigb *UnStructuredEventInformationGroupBy) sqlScan(ctx context.Context, root *UnStructuredEventInformationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(useigb.fns))
	for _, fn := range useigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*useigb.flds)+len(useigb.fns))
		for _, f := range *useigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*useigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := useigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UnStructuredEventInformationSelect is the builder for selecting fields of UnStructuredEventInformation entities.
type UnStructuredEventInformationSelect struct {
	*UnStructuredEventInformationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (useis *UnStructuredEventInformationSelect) Aggregate(fns ...AggregateFunc) *UnStructuredEventInformationSelect {
	useis.fns = append(useis.fns, fns...)
	return useis
}

// Scan applies the selector query and scans the result into the given value.
func (useis *UnStructuredEventInformationSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeUnStructuredEventInformation, "Select")
	if err := useis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UnStructuredEventInformationQuery, *UnStructuredEventInformationSelect](ctx, useis.UnStructuredEventInformationQuery, useis, useis.inters, v)
}

func (useis *UnStructuredEventInformationSelect) sqlScan(ctx context.Context, root *UnStructuredEventInformationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(useis.fns))
	for _, fn := range useis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*useis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := useis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (useis *UnStructuredEventInformationSelect) Modify(modifiers ...func(s *sql.Selector)) *UnStructuredEventInformationSelect {
	useis.modifiers = append(useis.modifiers, modifiers...)
	return useis
}
