// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/externalcalendar"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/user"
)

// ExternalCalendarUpdate is the builder for updating ExternalCalendar entities.
type ExternalCalendarUpdate struct {
	config
	hooks     []Hook
	mutation  *ExternalCalendarMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ExternalCalendarUpdate builder.
func (ecu *ExternalCalendarUpdate) Where(ps ...predicate.ExternalCalendar) *ExternalCalendarUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetName sets the "name" field.
func (ecu *ExternalCalendarUpdate) SetName(s string) *ExternalCalendarUpdate {
	ecu.mutation.SetName(s)
	return ecu
}

// SetDescription sets the "description" field.
func (ecu *ExternalCalendarUpdate) SetDescription(s string) *ExternalCalendarUpdate {
	ecu.mutation.SetDescription(s)
	return ecu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ecu *ExternalCalendarUpdate) SetNillableDescription(s *string) *ExternalCalendarUpdate {
	if s != nil {
		ecu.SetDescription(*s)
	}
	return ecu
}

// ClearDescription clears the value of the "description" field.
func (ecu *ExternalCalendarUpdate) ClearDescription() *ExternalCalendarUpdate {
	ecu.mutation.ClearDescription()
	return ecu
}

// SetCalendarID sets the "calendar_id" field.
func (ecu *ExternalCalendarUpdate) SetCalendarID(s string) *ExternalCalendarUpdate {
	ecu.mutation.SetCalendarID(s)
	return ecu
}

// SetSourceType sets the "source_type" field.
func (ecu *ExternalCalendarUpdate) SetSourceType(s string) *ExternalCalendarUpdate {
	ecu.mutation.SetSourceType(s)
	return ecu
}

// SetUpdatedAt sets the "updated_at" field.
func (ecu *ExternalCalendarUpdate) SetUpdatedAt(t time.Time) *ExternalCalendarUpdate {
	ecu.mutation.SetUpdatedAt(t)
	return ecu
}

// SetDeletedAt sets the "deleted_at" field.
func (ecu *ExternalCalendarUpdate) SetDeletedAt(t time.Time) *ExternalCalendarUpdate {
	ecu.mutation.SetDeletedAt(t)
	return ecu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecu *ExternalCalendarUpdate) SetNillableDeletedAt(t *time.Time) *ExternalCalendarUpdate {
	if t != nil {
		ecu.SetDeletedAt(*t)
	}
	return ecu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ecu *ExternalCalendarUpdate) ClearDeletedAt() *ExternalCalendarUpdate {
	ecu.mutation.ClearDeletedAt()
	return ecu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ecu *ExternalCalendarUpdate) SetUserID(id int) *ExternalCalendarUpdate {
	ecu.mutation.SetUserID(id)
	return ecu
}

// SetUser sets the "user" edge to the User entity.
func (ecu *ExternalCalendarUpdate) SetUser(u *User) *ExternalCalendarUpdate {
	return ecu.SetUserID(u.ID)
}

// Mutation returns the ExternalCalendarMutation object of the builder.
func (ecu *ExternalCalendarUpdate) Mutation() *ExternalCalendarMutation {
	return ecu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ecu *ExternalCalendarUpdate) ClearUser() *ExternalCalendarUpdate {
	ecu.mutation.ClearUser()
	return ecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *ExternalCalendarUpdate) Save(ctx context.Context) (int, error) {
	ecu.defaults()
	return withHooks[int, ExternalCalendarMutation](ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *ExternalCalendarUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *ExternalCalendarUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *ExternalCalendarUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecu *ExternalCalendarUpdate) defaults() {
	if _, ok := ecu.mutation.UpdatedAt(); !ok {
		v := externalcalendar.UpdateDefaultUpdatedAt()
		ecu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *ExternalCalendarUpdate) check() error {
	if v, ok := ecu.mutation.Name(); ok {
		if err := externalcalendar.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExternalCalendar.name": %w`, err)}
		}
	}
	if v, ok := ecu.mutation.CalendarID(); ok {
		if err := externalcalendar.CalendarIDValidator(v); err != nil {
			return &ValidationError{Name: "calendar_id", err: fmt.Errorf(`ent: validator failed for field "ExternalCalendar.calendar_id": %w`, err)}
		}
	}
	if v, ok := ecu.mutation.SourceType(); ok {
		if err := externalcalendar.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ExternalCalendar.source_type": %w`, err)}
		}
	}
	if _, ok := ecu.mutation.UserID(); ecu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ExternalCalendar.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ecu *ExternalCalendarUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExternalCalendarUpdate {
	ecu.modifiers = append(ecu.modifiers, modifiers...)
	return ecu
}

func (ecu *ExternalCalendarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ecu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   externalcalendar.Table,
			Columns: externalcalendar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: externalcalendar.FieldID,
			},
		},
	}
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.Name(); ok {
		_spec.SetField(externalcalendar.FieldName, field.TypeString, value)
	}
	if value, ok := ecu.mutation.Description(); ok {
		_spec.SetField(externalcalendar.FieldDescription, field.TypeString, value)
	}
	if ecu.mutation.DescriptionCleared() {
		_spec.ClearField(externalcalendar.FieldDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.CalendarID(); ok {
		_spec.SetField(externalcalendar.FieldCalendarID, field.TypeString, value)
	}
	if value, ok := ecu.mutation.SourceType(); ok {
		_spec.SetField(externalcalendar.FieldSourceType, field.TypeString, value)
	}
	if value, ok := ecu.mutation.UpdatedAt(); ok {
		_spec.SetField(externalcalendar.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.DeletedAt(); ok {
		_spec.SetField(externalcalendar.FieldDeletedAt, field.TypeTime, value)
	}
	if ecu.mutation.DeletedAtCleared() {
		_spec.ClearField(externalcalendar.FieldDeletedAt, field.TypeTime)
	}
	if ecu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   externalcalendar.UserTable,
			Columns: []string{externalcalendar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   externalcalendar.UserTable,
			Columns: []string{externalcalendar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ecu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{externalcalendar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// ExternalCalendarUpdateOne is the builder for updating a single ExternalCalendar entity.
type ExternalCalendarUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ExternalCalendarMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (ecuo *ExternalCalendarUpdateOne) SetName(s string) *ExternalCalendarUpdateOne {
	ecuo.mutation.SetName(s)
	return ecuo
}

// SetDescription sets the "description" field.
func (ecuo *ExternalCalendarUpdateOne) SetDescription(s string) *ExternalCalendarUpdateOne {
	ecuo.mutation.SetDescription(s)
	return ecuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ecuo *ExternalCalendarUpdateOne) SetNillableDescription(s *string) *ExternalCalendarUpdateOne {
	if s != nil {
		ecuo.SetDescription(*s)
	}
	return ecuo
}

// ClearDescription clears the value of the "description" field.
func (ecuo *ExternalCalendarUpdateOne) ClearDescription() *ExternalCalendarUpdateOne {
	ecuo.mutation.ClearDescription()
	return ecuo
}

// SetCalendarID sets the "calendar_id" field.
func (ecuo *ExternalCalendarUpdateOne) SetCalendarID(s string) *ExternalCalendarUpdateOne {
	ecuo.mutation.SetCalendarID(s)
	return ecuo
}

// SetSourceType sets the "source_type" field.
func (ecuo *ExternalCalendarUpdateOne) SetSourceType(s string) *ExternalCalendarUpdateOne {
	ecuo.mutation.SetSourceType(s)
	return ecuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ecuo *ExternalCalendarUpdateOne) SetUpdatedAt(t time.Time) *ExternalCalendarUpdateOne {
	ecuo.mutation.SetUpdatedAt(t)
	return ecuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ecuo *ExternalCalendarUpdateOne) SetDeletedAt(t time.Time) *ExternalCalendarUpdateOne {
	ecuo.mutation.SetDeletedAt(t)
	return ecuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecuo *ExternalCalendarUpdateOne) SetNillableDeletedAt(t *time.Time) *ExternalCalendarUpdateOne {
	if t != nil {
		ecuo.SetDeletedAt(*t)
	}
	return ecuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ecuo *ExternalCalendarUpdateOne) ClearDeletedAt() *ExternalCalendarUpdateOne {
	ecuo.mutation.ClearDeletedAt()
	return ecuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ecuo *ExternalCalendarUpdateOne) SetUserID(id int) *ExternalCalendarUpdateOne {
	ecuo.mutation.SetUserID(id)
	return ecuo
}

// SetUser sets the "user" edge to the User entity.
func (ecuo *ExternalCalendarUpdateOne) SetUser(u *User) *ExternalCalendarUpdateOne {
	return ecuo.SetUserID(u.ID)
}

// Mutation returns the ExternalCalendarMutation object of the builder.
func (ecuo *ExternalCalendarUpdateOne) Mutation() *ExternalCalendarMutation {
	return ecuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ecuo *ExternalCalendarUpdateOne) ClearUser() *ExternalCalendarUpdateOne {
	ecuo.mutation.ClearUser()
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *ExternalCalendarUpdateOne) Select(field string, fields ...string) *ExternalCalendarUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated ExternalCalendar entity.
func (ecuo *ExternalCalendarUpdateOne) Save(ctx context.Context) (*ExternalCalendar, error) {
	ecuo.defaults()
	return withHooks[*ExternalCalendar, ExternalCalendarMutation](ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *ExternalCalendarUpdateOne) SaveX(ctx context.Context) *ExternalCalendar {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *ExternalCalendarUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *ExternalCalendarUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecuo *ExternalCalendarUpdateOne) defaults() {
	if _, ok := ecuo.mutation.UpdatedAt(); !ok {
		v := externalcalendar.UpdateDefaultUpdatedAt()
		ecuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *ExternalCalendarUpdateOne) check() error {
	if v, ok := ecuo.mutation.Name(); ok {
		if err := externalcalendar.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExternalCalendar.name": %w`, err)}
		}
	}
	if v, ok := ecuo.mutation.CalendarID(); ok {
		if err := externalcalendar.CalendarIDValidator(v); err != nil {
			return &ValidationError{Name: "calendar_id", err: fmt.Errorf(`ent: validator failed for field "ExternalCalendar.calendar_id": %w`, err)}
		}
	}
	if v, ok := ecuo.mutation.SourceType(); ok {
		if err := externalcalendar.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ExternalCalendar.source_type": %w`, err)}
		}
	}
	if _, ok := ecuo.mutation.UserID(); ecuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ExternalCalendar.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ecuo *ExternalCalendarUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExternalCalendarUpdateOne {
	ecuo.modifiers = append(ecuo.modifiers, modifiers...)
	return ecuo
}

func (ecuo *ExternalCalendarUpdateOne) sqlSave(ctx context.Context) (_node *ExternalCalendar, err error) {
	if err := ecuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   externalcalendar.Table,
			Columns: externalcalendar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: externalcalendar.FieldID,
			},
		},
	}
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExternalCalendar.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, externalcalendar.FieldID)
		for _, f := range fields {
			if !externalcalendar.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != externalcalendar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.Name(); ok {
		_spec.SetField(externalcalendar.FieldName, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.Description(); ok {
		_spec.SetField(externalcalendar.FieldDescription, field.TypeString, value)
	}
	if ecuo.mutation.DescriptionCleared() {
		_spec.ClearField(externalcalendar.FieldDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.CalendarID(); ok {
		_spec.SetField(externalcalendar.FieldCalendarID, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.SourceType(); ok {
		_spec.SetField(externalcalendar.FieldSourceType, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.UpdatedAt(); ok {
		_spec.SetField(externalcalendar.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.DeletedAt(); ok {
		_spec.SetField(externalcalendar.FieldDeletedAt, field.TypeTime, value)
	}
	if ecuo.mutation.DeletedAtCleared() {
		_spec.ClearField(externalcalendar.FieldDeletedAt, field.TypeTime)
	}
	if ecuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   externalcalendar.UserTable,
			Columns: []string{externalcalendar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   externalcalendar.UserTable,
			Columns: []string{externalcalendar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ecuo.modifiers...)
	_node = &ExternalCalendar{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{externalcalendar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
