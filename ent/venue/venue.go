// Code generated by ent, DO NOT EDIT.

package venue

import (
	"time"
)

const (
	// Label holds the string label denoting the venue type in the database.
	Label = "venue"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVenueID holds the string denoting the venue_id field in the database.
	FieldVenueID = "venue_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldWebSite holds the string denoting the web_site field in the database.
	FieldWebSite = "web_site"
	// FieldPostcode holds the string denoting the postcode field in the database.
	FieldPostcode = "postcode"
	// FieldPrefecture holds the string denoting the prefecture field in the database.
	FieldPrefecture = "prefecture"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldIsOpen holds the string denoting the is_open field in the database.
	FieldIsOpen = "is_open"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// Table holds the table name of the venue in the database.
	Table = "venues"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "event_venue"
)

// Columns holds all SQL columns for venue fields.
var Columns = []string{
	FieldID,
	FieldVenueID,
	FieldName,
	FieldDescription,
	FieldWebSite,
	FieldPostcode,
	FieldPrefecture,
	FieldCity,
	FieldStreet,
	FieldIsOpen,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// VenueIDValidator is a validator for the "venue_id" field. It is called by the builders before save.
	VenueIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultIsOpen holds the default value on creation for the "is_open" field.
	DefaultIsOpen bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
