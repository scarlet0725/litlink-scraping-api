// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/googleoauthstate"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/user"
)

// GoogleOauthStateUpdate is the builder for updating GoogleOauthState entities.
type GoogleOauthStateUpdate struct {
	config
	hooks    []Hook
	mutation *GoogleOauthStateMutation
}

// Where appends a list predicates to the GoogleOauthStateUpdate builder.
func (gosu *GoogleOauthStateUpdate) Where(ps ...predicate.GoogleOauthState) *GoogleOauthStateUpdate {
	gosu.mutation.Where(ps...)
	return gosu
}

// SetState sets the "state" field.
func (gosu *GoogleOauthStateUpdate) SetState(s string) *GoogleOauthStateUpdate {
	gosu.mutation.SetState(s)
	return gosu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gosu *GoogleOauthStateUpdate) SetUserID(id int) *GoogleOauthStateUpdate {
	gosu.mutation.SetUserID(id)
	return gosu
}

// SetUser sets the "user" edge to the User entity.
func (gosu *GoogleOauthStateUpdate) SetUser(u *User) *GoogleOauthStateUpdate {
	return gosu.SetUserID(u.ID)
}

// Mutation returns the GoogleOauthStateMutation object of the builder.
func (gosu *GoogleOauthStateUpdate) Mutation() *GoogleOauthStateMutation {
	return gosu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gosu *GoogleOauthStateUpdate) ClearUser() *GoogleOauthStateUpdate {
	gosu.mutation.ClearUser()
	return gosu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gosu *GoogleOauthStateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GoogleOauthStateMutation](ctx, gosu.sqlSave, gosu.mutation, gosu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gosu *GoogleOauthStateUpdate) SaveX(ctx context.Context) int {
	affected, err := gosu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gosu *GoogleOauthStateUpdate) Exec(ctx context.Context) error {
	_, err := gosu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gosu *GoogleOauthStateUpdate) ExecX(ctx context.Context) {
	if err := gosu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gosu *GoogleOauthStateUpdate) check() error {
	if v, ok := gosu.mutation.State(); ok {
		if err := googleoauthstate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "GoogleOauthState.state": %w`, err)}
		}
	}
	if _, ok := gosu.mutation.UserID(); gosu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleOauthState.user"`)
	}
	return nil
}

func (gosu *GoogleOauthStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gosu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   googleoauthstate.Table,
			Columns: googleoauthstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: googleoauthstate.FieldID,
			},
		},
	}
	if ps := gosu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gosu.mutation.State(); ok {
		_spec.SetField(googleoauthstate.FieldState, field.TypeString, value)
	}
	if gosu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthstate.UserTable,
			Columns: []string{googleoauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gosu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthstate.UserTable,
			Columns: []string{googleoauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gosu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleoauthstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gosu.mutation.done = true
	return n, nil
}

// GoogleOauthStateUpdateOne is the builder for updating a single GoogleOauthState entity.
type GoogleOauthStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoogleOauthStateMutation
}

// SetState sets the "state" field.
func (gosuo *GoogleOauthStateUpdateOne) SetState(s string) *GoogleOauthStateUpdateOne {
	gosuo.mutation.SetState(s)
	return gosuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gosuo *GoogleOauthStateUpdateOne) SetUserID(id int) *GoogleOauthStateUpdateOne {
	gosuo.mutation.SetUserID(id)
	return gosuo
}

// SetUser sets the "user" edge to the User entity.
func (gosuo *GoogleOauthStateUpdateOne) SetUser(u *User) *GoogleOauthStateUpdateOne {
	return gosuo.SetUserID(u.ID)
}

// Mutation returns the GoogleOauthStateMutation object of the builder.
func (gosuo *GoogleOauthStateUpdateOne) Mutation() *GoogleOauthStateMutation {
	return gosuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gosuo *GoogleOauthStateUpdateOne) ClearUser() *GoogleOauthStateUpdateOne {
	gosuo.mutation.ClearUser()
	return gosuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gosuo *GoogleOauthStateUpdateOne) Select(field string, fields ...string) *GoogleOauthStateUpdateOne {
	gosuo.fields = append([]string{field}, fields...)
	return gosuo
}

// Save executes the query and returns the updated GoogleOauthState entity.
func (gosuo *GoogleOauthStateUpdateOne) Save(ctx context.Context) (*GoogleOauthState, error) {
	return withHooks[*GoogleOauthState, GoogleOauthStateMutation](ctx, gosuo.sqlSave, gosuo.mutation, gosuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gosuo *GoogleOauthStateUpdateOne) SaveX(ctx context.Context) *GoogleOauthState {
	node, err := gosuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gosuo *GoogleOauthStateUpdateOne) Exec(ctx context.Context) error {
	_, err := gosuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gosuo *GoogleOauthStateUpdateOne) ExecX(ctx context.Context) {
	if err := gosuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gosuo *GoogleOauthStateUpdateOne) check() error {
	if v, ok := gosuo.mutation.State(); ok {
		if err := googleoauthstate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "GoogleOauthState.state": %w`, err)}
		}
	}
	if _, ok := gosuo.mutation.UserID(); gosuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GoogleOauthState.user"`)
	}
	return nil
}

func (gosuo *GoogleOauthStateUpdateOne) sqlSave(ctx context.Context) (_node *GoogleOauthState, err error) {
	if err := gosuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   googleoauthstate.Table,
			Columns: googleoauthstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: googleoauthstate.FieldID,
			},
		},
	}
	id, ok := gosuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoogleOauthState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gosuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, googleoauthstate.FieldID)
		for _, f := range fields {
			if !googleoauthstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != googleoauthstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gosuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gosuo.mutation.State(); ok {
		_spec.SetField(googleoauthstate.FieldState, field.TypeString, value)
	}
	if gosuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthstate.UserTable,
			Columns: []string{googleoauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gosuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleoauthstate.UserTable,
			Columns: []string{googleoauthstate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoogleOauthState{config: gosuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gosuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleoauthstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gosuo.mutation.done = true
	return _node, nil
}
