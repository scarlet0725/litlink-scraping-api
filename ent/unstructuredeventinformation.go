// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/unstructuredeventinformation"
)

// UnStructuredEventInformation is the model entity for the UnStructuredEventInformation schema.
type UnStructuredEventInformation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ryzmuuid holds the value of the "ryzmuuid" field.
	Ryzmuuid string `json:"ryzmuuid,omitempty"`
	// VenueName holds the value of the "venue_name" field.
	VenueName string `json:"venue_name,omitempty"`
	// ArtistName holds the value of the "artist_name" field.
	ArtistName string `json:"artist_name,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UnStructuredEventInformationQuery when eager-loading is set.
	Edges                                  UnStructuredEventInformationEdges `json:"edges"`
	event_un_structured_event_informations *int
}

// UnStructuredEventInformationEdges holds the relations/edges for other nodes in the graph.
type UnStructuredEventInformationEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UnStructuredEventInformationEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UnStructuredEventInformation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case unstructuredeventinformation.FieldID:
			values[i] = new(sql.NullInt64)
		case unstructuredeventinformation.FieldRyzmuuid, unstructuredeventinformation.FieldVenueName, unstructuredeventinformation.FieldArtistName, unstructuredeventinformation.FieldPrice:
			values[i] = new(sql.NullString)
		case unstructuredeventinformation.ForeignKeys[0]: // event_un_structured_event_informations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UnStructuredEventInformation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UnStructuredEventInformation fields.
func (usei *UnStructuredEventInformation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unstructuredeventinformation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			usei.ID = int(value.Int64)
		case unstructuredeventinformation.FieldRyzmuuid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ryzmuuid", values[i])
			} else if value.Valid {
				usei.Ryzmuuid = value.String
			}
		case unstructuredeventinformation.FieldVenueName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field venue_name", values[i])
			} else if value.Valid {
				usei.VenueName = value.String
			}
		case unstructuredeventinformation.FieldArtistName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist_name", values[i])
			} else if value.Valid {
				usei.ArtistName = value.String
			}
		case unstructuredeventinformation.FieldPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				usei.Price = value.String
			}
		case unstructuredeventinformation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_un_structured_event_informations", value)
			} else if value.Valid {
				usei.event_un_structured_event_informations = new(int)
				*usei.event_un_structured_event_informations = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the UnStructuredEventInformation entity.
func (usei *UnStructuredEventInformation) QueryEvent() *EventQuery {
	return (&UnStructuredEventInformationClient{config: usei.config}).QueryEvent(usei)
}

// Update returns a builder for updating this UnStructuredEventInformation.
// Note that you need to call UnStructuredEventInformation.Unwrap() before calling this method if this UnStructuredEventInformation
// was returned from a transaction, and the transaction was committed or rolled back.
func (usei *UnStructuredEventInformation) Update() *UnStructuredEventInformationUpdateOne {
	return (&UnStructuredEventInformationClient{config: usei.config}).UpdateOne(usei)
}

// Unwrap unwraps the UnStructuredEventInformation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (usei *UnStructuredEventInformation) Unwrap() *UnStructuredEventInformation {
	_tx, ok := usei.config.driver.(*txDriver)
	if !ok {
		panic("ent: UnStructuredEventInformation is not a transactional entity")
	}
	usei.config.driver = _tx.drv
	return usei
}

// String implements the fmt.Stringer.
func (usei *UnStructuredEventInformation) String() string {
	var builder strings.Builder
	builder.WriteString("UnStructuredEventInformation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", usei.ID))
	builder.WriteString("ryzmuuid=")
	builder.WriteString(usei.Ryzmuuid)
	builder.WriteString(", ")
	builder.WriteString("venue_name=")
	builder.WriteString(usei.VenueName)
	builder.WriteString(", ")
	builder.WriteString("artist_name=")
	builder.WriteString(usei.ArtistName)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(usei.Price)
	builder.WriteByte(')')
	return builder.String()
}

// UnStructuredEventInformations is a parsable slice of UnStructuredEventInformation.
type UnStructuredEventInformations []*UnStructuredEventInformation

func (usei UnStructuredEventInformations) config(cfg config) {
	for _i := range usei {
		usei[_i].config = cfg
	}
}
