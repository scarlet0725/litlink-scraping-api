// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/scarlet0725/prism-api/ent/googleoauthstate"
	"github.com/scarlet0725/prism-api/ent/user"
)

// GoogleOauthState is the model entity for the GoogleOauthState schema.
type GoogleOauthState struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoogleOauthStateQuery when eager-loading is set.
	Edges   GoogleOauthStateEdges `json:"edges"`
	user_id *int
}

// GoogleOauthStateEdges holds the relations/edges for other nodes in the graph.
type GoogleOauthStateEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoogleOauthStateEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoogleOauthState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case googleoauthstate.FieldID:
			values[i] = new(sql.NullInt64)
		case googleoauthstate.FieldState:
			values[i] = new(sql.NullString)
		case googleoauthstate.ForeignKeys[0]: // user_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoogleOauthState", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoogleOauthState fields.
func (gos *GoogleOauthState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case googleoauthstate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gos.ID = int(value.Int64)
		case googleoauthstate.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				gos.State = value.String
			}
		case googleoauthstate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_id", value)
			} else if value.Valid {
				gos.user_id = new(int)
				*gos.user_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the GoogleOauthState entity.
func (gos *GoogleOauthState) QueryUser() *UserQuery {
	return (&GoogleOauthStateClient{config: gos.config}).QueryUser(gos)
}

// Update returns a builder for updating this GoogleOauthState.
// Note that you need to call GoogleOauthState.Unwrap() before calling this method if this GoogleOauthState
// was returned from a transaction, and the transaction was committed or rolled back.
func (gos *GoogleOauthState) Update() *GoogleOauthStateUpdateOne {
	return (&GoogleOauthStateClient{config: gos.config}).UpdateOne(gos)
}

// Unwrap unwraps the GoogleOauthState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gos *GoogleOauthState) Unwrap() *GoogleOauthState {
	_tx, ok := gos.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoogleOauthState is not a transactional entity")
	}
	gos.config.driver = _tx.drv
	return gos
}

// String implements the fmt.Stringer.
func (gos *GoogleOauthState) String() string {
	var builder strings.Builder
	builder.WriteString("GoogleOauthState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gos.ID))
	builder.WriteString("state=")
	builder.WriteString(gos.State)
	builder.WriteByte(')')
	return builder.String()
}

// GoogleOauthStates is a parsable slice of GoogleOauthState.
type GoogleOauthStates []*GoogleOauthState

func (gos GoogleOauthStates) config(cfg config) {
	for _i := range gos {
		gos[_i].config = cfg
	}
}
