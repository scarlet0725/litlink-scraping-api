// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/artist"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/user"
	"github.com/scarlet0725/prism-api/ent/venue"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEventID sets the "event_id" field.
func (eu *EventUpdate) SetEventID(s string) *EventUpdate {
	eu.mutation.SetEventID(s)
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetDate sets the "date" field.
func (eu *EventUpdate) SetDate(t time.Time) *EventUpdate {
	eu.mutation.SetDate(t)
	return eu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDate(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetDate(*t)
	}
	return eu
}

// ClearDate clears the value of the "date" field.
func (eu *EventUpdate) ClearDate() *EventUpdate {
	eu.mutation.ClearDate()
	return eu
}

// SetOpenTime sets the "open_time" field.
func (eu *EventUpdate) SetOpenTime(t time.Time) *EventUpdate {
	eu.mutation.SetOpenTime(t)
	return eu
}

// SetNillableOpenTime sets the "open_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableOpenTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetOpenTime(*t)
	}
	return eu
}

// ClearOpenTime clears the value of the "open_time" field.
func (eu *EventUpdate) ClearOpenTime() *EventUpdate {
	eu.mutation.ClearOpenTime()
	return eu
}

// SetStartTime sets the "start_time" field.
func (eu *EventUpdate) SetStartTime(t time.Time) *EventUpdate {
	eu.mutation.SetStartTime(t)
	return eu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartTime(*t)
	}
	return eu
}

// ClearStartTime clears the value of the "start_time" field.
func (eu *EventUpdate) ClearStartTime() *EventUpdate {
	eu.mutation.ClearStartTime()
	return eu
}

// SetEndTime sets the "end_time" field.
func (eu *EventUpdate) SetEndTime(t time.Time) *EventUpdate {
	eu.mutation.SetEndTime(t)
	return eu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetEndTime(*t)
	}
	return eu
}

// ClearEndTime clears the value of the "end_time" field.
func (eu *EventUpdate) ClearEndTime() *EventUpdate {
	eu.mutation.ClearEndTime()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EventUpdate) ClearDescription() *EventUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetURL sets the "url" field.
func (eu *EventUpdate) SetURL(s string) *EventUpdate {
	eu.mutation.SetURL(s)
	return eu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (eu *EventUpdate) SetNillableURL(s *string) *EventUpdate {
	if s != nil {
		eu.SetURL(*s)
	}
	return eu
}

// ClearURL clears the value of the "url" field.
func (eu *EventUpdate) ClearURL() *EventUpdate {
	eu.mutation.ClearURL()
	return eu
}

// SetTicketURL sets the "ticket_url" field.
func (eu *EventUpdate) SetTicketURL(s string) *EventUpdate {
	eu.mutation.SetTicketURL(s)
	return eu
}

// SetNillableTicketURL sets the "ticket_url" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTicketURL(s *string) *EventUpdate {
	if s != nil {
		eu.SetTicketURL(*s)
	}
	return eu
}

// ClearTicketURL clears the value of the "ticket_url" field.
func (eu *EventUpdate) ClearTicketURL() *EventUpdate {
	eu.mutation.ClearTicketURL()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EventUpdate) SetDeletedAt(t time.Time) *EventUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeletedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EventUpdate) ClearDeletedAt() *EventUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (eu *EventUpdate) AddUserIDs(ids ...int) *EventUpdate {
	eu.mutation.AddUserIDs(ids...)
	return eu
}

// AddUsers adds the "users" edges to the User entity.
func (eu *EventUpdate) AddUsers(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserIDs(ids...)
}

// AddArtistIDs adds the "artists" edge to the Artist entity by IDs.
func (eu *EventUpdate) AddArtistIDs(ids ...int) *EventUpdate {
	eu.mutation.AddArtistIDs(ids...)
	return eu
}

// AddArtists adds the "artists" edges to the Artist entity.
func (eu *EventUpdate) AddArtists(a ...*Artist) *EventUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddArtistIDs(ids...)
}

// SetVenueID sets the "venue" edge to the Venue entity by ID.
func (eu *EventUpdate) SetVenueID(id int) *EventUpdate {
	eu.mutation.SetVenueID(id)
	return eu
}

// SetNillableVenueID sets the "venue" edge to the Venue entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetVenueID(*id)
	}
	return eu
}

// SetVenue sets the "venue" edge to the Venue entity.
func (eu *EventUpdate) SetVenue(v *Venue) *EventUpdate {
	return eu.SetVenueID(v.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (eu *EventUpdate) ClearUsers() *EventUpdate {
	eu.mutation.ClearUsers()
	return eu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (eu *EventUpdate) RemoveUserIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveUserIDs(ids...)
	return eu
}

// RemoveUsers removes "users" edges to User entities.
func (eu *EventUpdate) RemoveUsers(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserIDs(ids...)
}

// ClearArtists clears all "artists" edges to the Artist entity.
func (eu *EventUpdate) ClearArtists() *EventUpdate {
	eu.mutation.ClearArtists()
	return eu
}

// RemoveArtistIDs removes the "artists" edge to Artist entities by IDs.
func (eu *EventUpdate) RemoveArtistIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveArtistIDs(ids...)
	return eu
}

// RemoveArtists removes "artists" edges to Artist entities.
func (eu *EventUpdate) RemoveArtists(a ...*Artist) *EventUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveArtistIDs(ids...)
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (eu *EventUpdate) ClearVenue() *EventUpdate {
	eu.mutation.ClearVenue()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks[int, EventMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.EventID(); ok {
		if err := event.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`ent: validator failed for field "Event.event_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Date(); ok {
		_spec.SetField(event.FieldDate, field.TypeTime, value)
	}
	if eu.mutation.DateCleared() {
		_spec.ClearField(event.FieldDate, field.TypeTime)
	}
	if value, ok := eu.mutation.OpenTime(); ok {
		_spec.SetField(event.FieldOpenTime, field.TypeTime, value)
	}
	if eu.mutation.OpenTimeCleared() {
		_spec.ClearField(event.FieldOpenTime, field.TypeTime)
	}
	if value, ok := eu.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if eu.mutation.StartTimeCleared() {
		_spec.ClearField(event.FieldStartTime, field.TypeTime)
	}
	if value, ok := eu.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if eu.mutation.EndTimeCleared() {
		_spec.ClearField(event.FieldEndTime, field.TypeTime)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.URL(); ok {
		_spec.SetField(event.FieldURL, field.TypeString, value)
	}
	if eu.mutation.URLCleared() {
		_spec.ClearField(event.FieldURL, field.TypeString)
	}
	if value, ok := eu.mutation.TicketURL(); ok {
		_spec.SetField(event.FieldTicketURL, field.TypeString, value)
	}
	if eu.mutation.TicketURLCleared() {
		_spec.ClearField(event.FieldTicketURL, field.TypeString)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ArtistsTable,
			Columns: event.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !eu.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ArtistsTable,
			Columns: event.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ArtistsTable,
			Columns: event.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.VenueTable,
			Columns: []string{event.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.VenueTable,
			Columns: []string{event.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventID sets the "event_id" field.
func (euo *EventUpdateOne) SetEventID(s string) *EventUpdateOne {
	euo.mutation.SetEventID(s)
	return euo
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetDate sets the "date" field.
func (euo *EventUpdateOne) SetDate(t time.Time) *EventUpdateOne {
	euo.mutation.SetDate(t)
	return euo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDate(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetDate(*t)
	}
	return euo
}

// ClearDate clears the value of the "date" field.
func (euo *EventUpdateOne) ClearDate() *EventUpdateOne {
	euo.mutation.ClearDate()
	return euo
}

// SetOpenTime sets the "open_time" field.
func (euo *EventUpdateOne) SetOpenTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetOpenTime(t)
	return euo
}

// SetNillableOpenTime sets the "open_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOpenTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetOpenTime(*t)
	}
	return euo
}

// ClearOpenTime clears the value of the "open_time" field.
func (euo *EventUpdateOne) ClearOpenTime() *EventUpdateOne {
	euo.mutation.ClearOpenTime()
	return euo
}

// SetStartTime sets the "start_time" field.
func (euo *EventUpdateOne) SetStartTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartTime(t)
	return euo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartTime(*t)
	}
	return euo
}

// ClearStartTime clears the value of the "start_time" field.
func (euo *EventUpdateOne) ClearStartTime() *EventUpdateOne {
	euo.mutation.ClearStartTime()
	return euo
}

// SetEndTime sets the "end_time" field.
func (euo *EventUpdateOne) SetEndTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetEndTime(t)
	return euo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetEndTime(*t)
	}
	return euo
}

// ClearEndTime clears the value of the "end_time" field.
func (euo *EventUpdateOne) ClearEndTime() *EventUpdateOne {
	euo.mutation.ClearEndTime()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EventUpdateOne) ClearDescription() *EventUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetURL sets the "url" field.
func (euo *EventUpdateOne) SetURL(s string) *EventUpdateOne {
	euo.mutation.SetURL(s)
	return euo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableURL(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetURL(*s)
	}
	return euo
}

// ClearURL clears the value of the "url" field.
func (euo *EventUpdateOne) ClearURL() *EventUpdateOne {
	euo.mutation.ClearURL()
	return euo
}

// SetTicketURL sets the "ticket_url" field.
func (euo *EventUpdateOne) SetTicketURL(s string) *EventUpdateOne {
	euo.mutation.SetTicketURL(s)
	return euo
}

// SetNillableTicketURL sets the "ticket_url" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTicketURL(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTicketURL(*s)
	}
	return euo
}

// ClearTicketURL clears the value of the "ticket_url" field.
func (euo *EventUpdateOne) ClearTicketURL() *EventUpdateOne {
	euo.mutation.ClearTicketURL()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EventUpdateOne) SetDeletedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeletedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EventUpdateOne) ClearDeletedAt() *EventUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (euo *EventUpdateOne) AddUserIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddUserIDs(ids...)
	return euo
}

// AddUsers adds the "users" edges to the User entity.
func (euo *EventUpdateOne) AddUsers(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserIDs(ids...)
}

// AddArtistIDs adds the "artists" edge to the Artist entity by IDs.
func (euo *EventUpdateOne) AddArtistIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddArtistIDs(ids...)
	return euo
}

// AddArtists adds the "artists" edges to the Artist entity.
func (euo *EventUpdateOne) AddArtists(a ...*Artist) *EventUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddArtistIDs(ids...)
}

// SetVenueID sets the "venue" edge to the Venue entity by ID.
func (euo *EventUpdateOne) SetVenueID(id int) *EventUpdateOne {
	euo.mutation.SetVenueID(id)
	return euo
}

// SetNillableVenueID sets the "venue" edge to the Venue entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetVenueID(*id)
	}
	return euo
}

// SetVenue sets the "venue" edge to the Venue entity.
func (euo *EventUpdateOne) SetVenue(v *Venue) *EventUpdateOne {
	return euo.SetVenueID(v.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (euo *EventUpdateOne) ClearUsers() *EventUpdateOne {
	euo.mutation.ClearUsers()
	return euo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (euo *EventUpdateOne) RemoveUserIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveUserIDs(ids...)
	return euo
}

// RemoveUsers removes "users" edges to User entities.
func (euo *EventUpdateOne) RemoveUsers(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserIDs(ids...)
}

// ClearArtists clears all "artists" edges to the Artist entity.
func (euo *EventUpdateOne) ClearArtists() *EventUpdateOne {
	euo.mutation.ClearArtists()
	return euo
}

// RemoveArtistIDs removes the "artists" edge to Artist entities by IDs.
func (euo *EventUpdateOne) RemoveArtistIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveArtistIDs(ids...)
	return euo
}

// RemoveArtists removes "artists" edges to Artist entities.
func (euo *EventUpdateOne) RemoveArtists(a ...*Artist) *EventUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveArtistIDs(ids...)
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (euo *EventUpdateOne) ClearVenue() *EventUpdateOne {
	euo.mutation.ClearVenue()
	return euo
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	euo.defaults()
	return withHooks[*Event, EventMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.EventID(); ok {
		if err := event.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`ent: validator failed for field "Event.event_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Date(); ok {
		_spec.SetField(event.FieldDate, field.TypeTime, value)
	}
	if euo.mutation.DateCleared() {
		_spec.ClearField(event.FieldDate, field.TypeTime)
	}
	if value, ok := euo.mutation.OpenTime(); ok {
		_spec.SetField(event.FieldOpenTime, field.TypeTime, value)
	}
	if euo.mutation.OpenTimeCleared() {
		_spec.ClearField(event.FieldOpenTime, field.TypeTime)
	}
	if value, ok := euo.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if euo.mutation.StartTimeCleared() {
		_spec.ClearField(event.FieldStartTime, field.TypeTime)
	}
	if value, ok := euo.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if euo.mutation.EndTimeCleared() {
		_spec.ClearField(event.FieldEndTime, field.TypeTime)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.URL(); ok {
		_spec.SetField(event.FieldURL, field.TypeString, value)
	}
	if euo.mutation.URLCleared() {
		_spec.ClearField(event.FieldURL, field.TypeString)
	}
	if value, ok := euo.mutation.TicketURL(); ok {
		_spec.SetField(event.FieldTicketURL, field.TypeString, value)
	}
	if euo.mutation.TicketURLCleared() {
		_spec.ClearField(event.FieldTicketURL, field.TypeString)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ArtistsTable,
			Columns: event.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !euo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ArtistsTable,
			Columns: event.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ArtistsTable,
			Columns: event.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.VenueTable,
			Columns: []string{event.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.VenueTable,
			Columns: []string{event.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
