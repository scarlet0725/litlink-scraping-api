// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/venue"
)

// VenueUpdate is the builder for updating Venue entities.
type VenueUpdate struct {
	config
	hooks     []Hook
	mutation  *VenueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VenueUpdate builder.
func (vu *VenueUpdate) Where(ps ...predicate.Venue) *VenueUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVenueID sets the "venue_id" field.
func (vu *VenueUpdate) SetVenueID(s string) *VenueUpdate {
	vu.mutation.SetVenueID(s)
	return vu
}

// SetName sets the "name" field.
func (vu *VenueUpdate) SetName(s string) *VenueUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetDescription sets the "description" field.
func (vu *VenueUpdate) SetDescription(s string) *VenueUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableDescription(s *string) *VenueUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VenueUpdate) ClearDescription() *VenueUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetWebSite sets the "web_site" field.
func (vu *VenueUpdate) SetWebSite(s string) *VenueUpdate {
	vu.mutation.SetWebSite(s)
	return vu
}

// SetNillableWebSite sets the "web_site" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableWebSite(s *string) *VenueUpdate {
	if s != nil {
		vu.SetWebSite(*s)
	}
	return vu
}

// ClearWebSite clears the value of the "web_site" field.
func (vu *VenueUpdate) ClearWebSite() *VenueUpdate {
	vu.mutation.ClearWebSite()
	return vu
}

// SetPostcode sets the "postcode" field.
func (vu *VenueUpdate) SetPostcode(s string) *VenueUpdate {
	vu.mutation.SetPostcode(s)
	return vu
}

// SetNillablePostcode sets the "postcode" field if the given value is not nil.
func (vu *VenueUpdate) SetNillablePostcode(s *string) *VenueUpdate {
	if s != nil {
		vu.SetPostcode(*s)
	}
	return vu
}

// ClearPostcode clears the value of the "postcode" field.
func (vu *VenueUpdate) ClearPostcode() *VenueUpdate {
	vu.mutation.ClearPostcode()
	return vu
}

// SetPrefecture sets the "prefecture" field.
func (vu *VenueUpdate) SetPrefecture(s string) *VenueUpdate {
	vu.mutation.SetPrefecture(s)
	return vu
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (vu *VenueUpdate) SetNillablePrefecture(s *string) *VenueUpdate {
	if s != nil {
		vu.SetPrefecture(*s)
	}
	return vu
}

// ClearPrefecture clears the value of the "prefecture" field.
func (vu *VenueUpdate) ClearPrefecture() *VenueUpdate {
	vu.mutation.ClearPrefecture()
	return vu
}

// SetCity sets the "city" field.
func (vu *VenueUpdate) SetCity(s string) *VenueUpdate {
	vu.mutation.SetCity(s)
	return vu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableCity(s *string) *VenueUpdate {
	if s != nil {
		vu.SetCity(*s)
	}
	return vu
}

// ClearCity clears the value of the "city" field.
func (vu *VenueUpdate) ClearCity() *VenueUpdate {
	vu.mutation.ClearCity()
	return vu
}

// SetStreet sets the "street" field.
func (vu *VenueUpdate) SetStreet(s string) *VenueUpdate {
	vu.mutation.SetStreet(s)
	return vu
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableStreet(s *string) *VenueUpdate {
	if s != nil {
		vu.SetStreet(*s)
	}
	return vu
}

// ClearStreet clears the value of the "street" field.
func (vu *VenueUpdate) ClearStreet() *VenueUpdate {
	vu.mutation.ClearStreet()
	return vu
}

// SetIsOpen sets the "is_open" field.
func (vu *VenueUpdate) SetIsOpen(b bool) *VenueUpdate {
	vu.mutation.SetIsOpen(b)
	return vu
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableIsOpen(b *bool) *VenueUpdate {
	if b != nil {
		vu.SetIsOpen(*b)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VenueUpdate) SetUpdatedAt(t time.Time) *VenueUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VenueUpdate) SetDeletedAt(t time.Time) *VenueUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableDeletedAt(t *time.Time) *VenueUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VenueUpdate) ClearDeletedAt() *VenueUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vu *VenueUpdate) AddEventIDs(ids ...int) *VenueUpdate {
	vu.mutation.AddEventIDs(ids...)
	return vu
}

// AddEvents adds the "events" edges to the Event entity.
func (vu *VenueUpdate) AddEvents(e ...*Event) *VenueUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.AddEventIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vu *VenueUpdate) Mutation() *VenueMutation {
	return vu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (vu *VenueUpdate) ClearEvents() *VenueUpdate {
	vu.mutation.ClearEvents()
	return vu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vu *VenueUpdate) RemoveEventIDs(ids ...int) *VenueUpdate {
	vu.mutation.RemoveEventIDs(ids...)
	return vu
}

// RemoveEvents removes "events" edges to Event entities.
func (vu *VenueUpdate) RemoveEvents(e ...*Event) *VenueUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VenueUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks[int, VenueMutation](ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VenueUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VenueUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VenueUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VenueUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := venue.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VenueUpdate) check() error {
	if v, ok := vu.mutation.VenueID(); ok {
		if err := venue.VenueIDValidator(v); err != nil {
			return &ValidationError{Name: "venue_id", err: fmt.Errorf(`ent: validator failed for field "Venue.venue_id": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Name(); ok {
		if err := venue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Venue.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vu *VenueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueUpdate {
	vu.modifiers = append(vu.modifiers, modifiers...)
	return vu
}

func (vu *VenueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(venue.Table, venue.Columns, sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VenueID(); ok {
		_spec.SetField(venue.FieldVenueID, field.TypeString, value)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(venue.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.SetField(venue.FieldDescription, field.TypeString, value)
	}
	if vu.mutation.DescriptionCleared() {
		_spec.ClearField(venue.FieldDescription, field.TypeString)
	}
	if value, ok := vu.mutation.WebSite(); ok {
		_spec.SetField(venue.FieldWebSite, field.TypeString, value)
	}
	if vu.mutation.WebSiteCleared() {
		_spec.ClearField(venue.FieldWebSite, field.TypeString)
	}
	if value, ok := vu.mutation.Postcode(); ok {
		_spec.SetField(venue.FieldPostcode, field.TypeString, value)
	}
	if vu.mutation.PostcodeCleared() {
		_spec.ClearField(venue.FieldPostcode, field.TypeString)
	}
	if value, ok := vu.mutation.Prefecture(); ok {
		_spec.SetField(venue.FieldPrefecture, field.TypeString, value)
	}
	if vu.mutation.PrefectureCleared() {
		_spec.ClearField(venue.FieldPrefecture, field.TypeString)
	}
	if value, ok := vu.mutation.City(); ok {
		_spec.SetField(venue.FieldCity, field.TypeString, value)
	}
	if vu.mutation.CityCleared() {
		_spec.ClearField(venue.FieldCity, field.TypeString)
	}
	if value, ok := vu.mutation.Street(); ok {
		_spec.SetField(venue.FieldStreet, field.TypeString, value)
	}
	if vu.mutation.StreetCleared() {
		_spec.ClearField(venue.FieldStreet, field.TypeString)
	}
	if value, ok := vu.mutation.IsOpen(); ok {
		_spec.SetField(venue.FieldIsOpen, field.TypeBool, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(venue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(venue.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(venue.FieldDeletedAt, field.TypeTime)
	}
	if vu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   venue.EventsTable,
			Columns: []string{venue.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   venue.EventsTable,
			Columns: []string{venue.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   venue.EventsTable,
			Columns: []string{venue.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VenueUpdateOne is the builder for updating a single Venue entity.
type VenueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VenueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVenueID sets the "venue_id" field.
func (vuo *VenueUpdateOne) SetVenueID(s string) *VenueUpdateOne {
	vuo.mutation.SetVenueID(s)
	return vuo
}

// SetName sets the "name" field.
func (vuo *VenueUpdateOne) SetName(s string) *VenueUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VenueUpdateOne) SetDescription(s string) *VenueUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableDescription(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VenueUpdateOne) ClearDescription() *VenueUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetWebSite sets the "web_site" field.
func (vuo *VenueUpdateOne) SetWebSite(s string) *VenueUpdateOne {
	vuo.mutation.SetWebSite(s)
	return vuo
}

// SetNillableWebSite sets the "web_site" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableWebSite(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetWebSite(*s)
	}
	return vuo
}

// ClearWebSite clears the value of the "web_site" field.
func (vuo *VenueUpdateOne) ClearWebSite() *VenueUpdateOne {
	vuo.mutation.ClearWebSite()
	return vuo
}

// SetPostcode sets the "postcode" field.
func (vuo *VenueUpdateOne) SetPostcode(s string) *VenueUpdateOne {
	vuo.mutation.SetPostcode(s)
	return vuo
}

// SetNillablePostcode sets the "postcode" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillablePostcode(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetPostcode(*s)
	}
	return vuo
}

// ClearPostcode clears the value of the "postcode" field.
func (vuo *VenueUpdateOne) ClearPostcode() *VenueUpdateOne {
	vuo.mutation.ClearPostcode()
	return vuo
}

// SetPrefecture sets the "prefecture" field.
func (vuo *VenueUpdateOne) SetPrefecture(s string) *VenueUpdateOne {
	vuo.mutation.SetPrefecture(s)
	return vuo
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillablePrefecture(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetPrefecture(*s)
	}
	return vuo
}

// ClearPrefecture clears the value of the "prefecture" field.
func (vuo *VenueUpdateOne) ClearPrefecture() *VenueUpdateOne {
	vuo.mutation.ClearPrefecture()
	return vuo
}

// SetCity sets the "city" field.
func (vuo *VenueUpdateOne) SetCity(s string) *VenueUpdateOne {
	vuo.mutation.SetCity(s)
	return vuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableCity(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetCity(*s)
	}
	return vuo
}

// ClearCity clears the value of the "city" field.
func (vuo *VenueUpdateOne) ClearCity() *VenueUpdateOne {
	vuo.mutation.ClearCity()
	return vuo
}

// SetStreet sets the "street" field.
func (vuo *VenueUpdateOne) SetStreet(s string) *VenueUpdateOne {
	vuo.mutation.SetStreet(s)
	return vuo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableStreet(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetStreet(*s)
	}
	return vuo
}

// ClearStreet clears the value of the "street" field.
func (vuo *VenueUpdateOne) ClearStreet() *VenueUpdateOne {
	vuo.mutation.ClearStreet()
	return vuo
}

// SetIsOpen sets the "is_open" field.
func (vuo *VenueUpdateOne) SetIsOpen(b bool) *VenueUpdateOne {
	vuo.mutation.SetIsOpen(b)
	return vuo
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableIsOpen(b *bool) *VenueUpdateOne {
	if b != nil {
		vuo.SetIsOpen(*b)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VenueUpdateOne) SetUpdatedAt(t time.Time) *VenueUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VenueUpdateOne) SetDeletedAt(t time.Time) *VenueUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableDeletedAt(t *time.Time) *VenueUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VenueUpdateOne) ClearDeletedAt() *VenueUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vuo *VenueUpdateOne) AddEventIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.AddEventIDs(ids...)
	return vuo
}

// AddEvents adds the "events" edges to the Event entity.
func (vuo *VenueUpdateOne) AddEvents(e ...*Event) *VenueUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.AddEventIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vuo *VenueUpdateOne) Mutation() *VenueMutation {
	return vuo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (vuo *VenueUpdateOne) ClearEvents() *VenueUpdateOne {
	vuo.mutation.ClearEvents()
	return vuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vuo *VenueUpdateOne) RemoveEventIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.RemoveEventIDs(ids...)
	return vuo
}

// RemoveEvents removes "events" edges to Event entities.
func (vuo *VenueUpdateOne) RemoveEvents(e ...*Event) *VenueUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the VenueUpdate builder.
func (vuo *VenueUpdateOne) Where(ps ...predicate.Venue) *VenueUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VenueUpdateOne) Select(field string, fields ...string) *VenueUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Venue entity.
func (vuo *VenueUpdateOne) Save(ctx context.Context) (*Venue, error) {
	vuo.defaults()
	return withHooks[*Venue, VenueMutation](ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VenueUpdateOne) SaveX(ctx context.Context) *Venue {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VenueUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VenueUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VenueUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := venue.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VenueUpdateOne) check() error {
	if v, ok := vuo.mutation.VenueID(); ok {
		if err := venue.VenueIDValidator(v); err != nil {
			return &ValidationError{Name: "venue_id", err: fmt.Errorf(`ent: validator failed for field "Venue.venue_id": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Name(); ok {
		if err := venue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Venue.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vuo *VenueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueUpdateOne {
	vuo.modifiers = append(vuo.modifiers, modifiers...)
	return vuo
}

func (vuo *VenueUpdateOne) sqlSave(ctx context.Context) (_node *Venue, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(venue.Table, venue.Columns, sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Venue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venue.FieldID)
		for _, f := range fields {
			if !venue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != venue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.VenueID(); ok {
		_spec.SetField(venue.FieldVenueID, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(venue.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.SetField(venue.FieldDescription, field.TypeString, value)
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.ClearField(venue.FieldDescription, field.TypeString)
	}
	if value, ok := vuo.mutation.WebSite(); ok {
		_spec.SetField(venue.FieldWebSite, field.TypeString, value)
	}
	if vuo.mutation.WebSiteCleared() {
		_spec.ClearField(venue.FieldWebSite, field.TypeString)
	}
	if value, ok := vuo.mutation.Postcode(); ok {
		_spec.SetField(venue.FieldPostcode, field.TypeString, value)
	}
	if vuo.mutation.PostcodeCleared() {
		_spec.ClearField(venue.FieldPostcode, field.TypeString)
	}
	if value, ok := vuo.mutation.Prefecture(); ok {
		_spec.SetField(venue.FieldPrefecture, field.TypeString, value)
	}
	if vuo.mutation.PrefectureCleared() {
		_spec.ClearField(venue.FieldPrefecture, field.TypeString)
	}
	if value, ok := vuo.mutation.City(); ok {
		_spec.SetField(venue.FieldCity, field.TypeString, value)
	}
	if vuo.mutation.CityCleared() {
		_spec.ClearField(venue.FieldCity, field.TypeString)
	}
	if value, ok := vuo.mutation.Street(); ok {
		_spec.SetField(venue.FieldStreet, field.TypeString, value)
	}
	if vuo.mutation.StreetCleared() {
		_spec.ClearField(venue.FieldStreet, field.TypeString)
	}
	if value, ok := vuo.mutation.IsOpen(); ok {
		_spec.SetField(venue.FieldIsOpen, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(venue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(venue.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(venue.FieldDeletedAt, field.TypeTime)
	}
	if vuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   venue.EventsTable,
			Columns: []string{venue.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   venue.EventsTable,
			Columns: []string{venue.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   venue.EventsTable,
			Columns: []string{venue.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vuo.modifiers...)
	_node = &Venue{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
