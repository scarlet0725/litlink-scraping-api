// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/googleoauthstate"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/user"
)

// GoogleOauthStateQuery is the builder for querying GoogleOauthState entities.
type GoogleOauthStateQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	inters     []Interceptor
	predicates []predicate.GoogleOauthState
	withUser   *UserQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GoogleOauthStateQuery builder.
func (gosq *GoogleOauthStateQuery) Where(ps ...predicate.GoogleOauthState) *GoogleOauthStateQuery {
	gosq.predicates = append(gosq.predicates, ps...)
	return gosq
}

// Limit the number of records to be returned by this query.
func (gosq *GoogleOauthStateQuery) Limit(limit int) *GoogleOauthStateQuery {
	gosq.limit = &limit
	return gosq
}

// Offset to start from.
func (gosq *GoogleOauthStateQuery) Offset(offset int) *GoogleOauthStateQuery {
	gosq.offset = &offset
	return gosq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gosq *GoogleOauthStateQuery) Unique(unique bool) *GoogleOauthStateQuery {
	gosq.unique = &unique
	return gosq
}

// Order specifies how the records should be ordered.
func (gosq *GoogleOauthStateQuery) Order(o ...OrderFunc) *GoogleOauthStateQuery {
	gosq.order = append(gosq.order, o...)
	return gosq
}

// QueryUser chains the current query on the "user" edge.
func (gosq *GoogleOauthStateQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: gosq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gosq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gosq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(googleoauthstate.Table, googleoauthstate.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, googleoauthstate.UserTable, googleoauthstate.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(gosq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GoogleOauthState entity from the query.
// Returns a *NotFoundError when no GoogleOauthState was found.
func (gosq *GoogleOauthStateQuery) First(ctx context.Context) (*GoogleOauthState, error) {
	nodes, err := gosq.Limit(1).All(newQueryContext(ctx, TypeGoogleOauthState, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{googleoauthstate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) FirstX(ctx context.Context) *GoogleOauthState {
	node, err := gosq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GoogleOauthState ID from the query.
// Returns a *NotFoundError when no GoogleOauthState ID was found.
func (gosq *GoogleOauthStateQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gosq.Limit(1).IDs(newQueryContext(ctx, TypeGoogleOauthState, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{googleoauthstate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) FirstIDX(ctx context.Context) int {
	id, err := gosq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GoogleOauthState entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GoogleOauthState entity is found.
// Returns a *NotFoundError when no GoogleOauthState entities are found.
func (gosq *GoogleOauthStateQuery) Only(ctx context.Context) (*GoogleOauthState, error) {
	nodes, err := gosq.Limit(2).All(newQueryContext(ctx, TypeGoogleOauthState, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{googleoauthstate.Label}
	default:
		return nil, &NotSingularError{googleoauthstate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) OnlyX(ctx context.Context) *GoogleOauthState {
	node, err := gosq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GoogleOauthState ID in the query.
// Returns a *NotSingularError when more than one GoogleOauthState ID is found.
// Returns a *NotFoundError when no entities are found.
func (gosq *GoogleOauthStateQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gosq.Limit(2).IDs(newQueryContext(ctx, TypeGoogleOauthState, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{googleoauthstate.Label}
	default:
		err = &NotSingularError{googleoauthstate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) OnlyIDX(ctx context.Context) int {
	id, err := gosq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GoogleOauthStates.
func (gosq *GoogleOauthStateQuery) All(ctx context.Context) ([]*GoogleOauthState, error) {
	ctx = newQueryContext(ctx, TypeGoogleOauthState, "All")
	if err := gosq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GoogleOauthState, *GoogleOauthStateQuery]()
	return withInterceptors[[]*GoogleOauthState](ctx, gosq, qr, gosq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) AllX(ctx context.Context) []*GoogleOauthState {
	nodes, err := gosq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GoogleOauthState IDs.
func (gosq *GoogleOauthStateQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeGoogleOauthState, "IDs")
	if err := gosq.Select(googleoauthstate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) IDsX(ctx context.Context) []int {
	ids, err := gosq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gosq *GoogleOauthStateQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeGoogleOauthState, "Count")
	if err := gosq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gosq, querierCount[*GoogleOauthStateQuery](), gosq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) CountX(ctx context.Context) int {
	count, err := gosq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gosq *GoogleOauthStateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeGoogleOauthState, "Exist")
	switch _, err := gosq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gosq *GoogleOauthStateQuery) ExistX(ctx context.Context) bool {
	exist, err := gosq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GoogleOauthStateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gosq *GoogleOauthStateQuery) Clone() *GoogleOauthStateQuery {
	if gosq == nil {
		return nil
	}
	return &GoogleOauthStateQuery{
		config:     gosq.config,
		limit:      gosq.limit,
		offset:     gosq.offset,
		order:      append([]OrderFunc{}, gosq.order...),
		inters:     append([]Interceptor{}, gosq.inters...),
		predicates: append([]predicate.GoogleOauthState{}, gosq.predicates...),
		withUser:   gosq.withUser.Clone(),
		// clone intermediate query.
		sql:    gosq.sql.Clone(),
		path:   gosq.path,
		unique: gosq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (gosq *GoogleOauthStateQuery) WithUser(opts ...func(*UserQuery)) *GoogleOauthStateQuery {
	query := (&UserClient{config: gosq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gosq.withUser = query
	return gosq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		State string `json:"state,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GoogleOauthState.Query().
//		GroupBy(googleoauthstate.FieldState).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gosq *GoogleOauthStateQuery) GroupBy(field string, fields ...string) *GoogleOauthStateGroupBy {
	gosq.fields = append([]string{field}, fields...)
	grbuild := &GoogleOauthStateGroupBy{build: gosq}
	grbuild.flds = &gosq.fields
	grbuild.label = googleoauthstate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		State string `json:"state,omitempty"`
//	}
//
//	client.GoogleOauthState.Query().
//		Select(googleoauthstate.FieldState).
//		Scan(ctx, &v)
func (gosq *GoogleOauthStateQuery) Select(fields ...string) *GoogleOauthStateSelect {
	gosq.fields = append(gosq.fields, fields...)
	sbuild := &GoogleOauthStateSelect{GoogleOauthStateQuery: gosq}
	sbuild.label = googleoauthstate.Label
	sbuild.flds, sbuild.scan = &gosq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GoogleOauthStateSelect configured with the given aggregations.
func (gosq *GoogleOauthStateQuery) Aggregate(fns ...AggregateFunc) *GoogleOauthStateSelect {
	return gosq.Select().Aggregate(fns...)
}

func (gosq *GoogleOauthStateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gosq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gosq); err != nil {
				return err
			}
		}
	}
	for _, f := range gosq.fields {
		if !googleoauthstate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gosq.path != nil {
		prev, err := gosq.path(ctx)
		if err != nil {
			return err
		}
		gosq.sql = prev
	}
	return nil
}

func (gosq *GoogleOauthStateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GoogleOauthState, error) {
	var (
		nodes       = []*GoogleOauthState{}
		withFKs     = gosq.withFKs
		_spec       = gosq.querySpec()
		loadedTypes = [1]bool{
			gosq.withUser != nil,
		}
	)
	if gosq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, googleoauthstate.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GoogleOauthState).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GoogleOauthState{config: gosq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gosq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gosq.withUser; query != nil {
		if err := gosq.loadUser(ctx, query, nodes, nil,
			func(n *GoogleOauthState, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gosq *GoogleOauthStateQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*GoogleOauthState, init func(*GoogleOauthState), assign func(*GoogleOauthState, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GoogleOauthState)
	for i := range nodes {
		if nodes[i].user_google_oauth_states == nil {
			continue
		}
		fk := *nodes[i].user_google_oauth_states
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_google_oauth_states" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gosq *GoogleOauthStateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gosq.querySpec()
	_spec.Node.Columns = gosq.fields
	if len(gosq.fields) > 0 {
		_spec.Unique = gosq.unique != nil && *gosq.unique
	}
	return sqlgraph.CountNodes(ctx, gosq.driver, _spec)
}

func (gosq *GoogleOauthStateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   googleoauthstate.Table,
			Columns: googleoauthstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: googleoauthstate.FieldID,
			},
		},
		From:   gosq.sql,
		Unique: true,
	}
	if unique := gosq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gosq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, googleoauthstate.FieldID)
		for i := range fields {
			if fields[i] != googleoauthstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gosq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gosq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gosq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gosq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gosq *GoogleOauthStateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gosq.driver.Dialect())
	t1 := builder.Table(googleoauthstate.Table)
	columns := gosq.fields
	if len(columns) == 0 {
		columns = googleoauthstate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gosq.sql != nil {
		selector = gosq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gosq.unique != nil && *gosq.unique {
		selector.Distinct()
	}
	for _, p := range gosq.predicates {
		p(selector)
	}
	for _, p := range gosq.order {
		p(selector)
	}
	if offset := gosq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gosq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GoogleOauthStateGroupBy is the group-by builder for GoogleOauthState entities.
type GoogleOauthStateGroupBy struct {
	selector
	build *GoogleOauthStateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gosgb *GoogleOauthStateGroupBy) Aggregate(fns ...AggregateFunc) *GoogleOauthStateGroupBy {
	gosgb.fns = append(gosgb.fns, fns...)
	return gosgb
}

// Scan applies the selector query and scans the result into the given value.
func (gosgb *GoogleOauthStateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeGoogleOauthState, "GroupBy")
	if err := gosgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GoogleOauthStateQuery, *GoogleOauthStateGroupBy](ctx, gosgb.build, gosgb, gosgb.build.inters, v)
}

func (gosgb *GoogleOauthStateGroupBy) sqlScan(ctx context.Context, root *GoogleOauthStateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gosgb.fns))
	for _, fn := range gosgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gosgb.flds)+len(gosgb.fns))
		for _, f := range *gosgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gosgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gosgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GoogleOauthStateSelect is the builder for selecting fields of GoogleOauthState entities.
type GoogleOauthStateSelect struct {
	*GoogleOauthStateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (goss *GoogleOauthStateSelect) Aggregate(fns ...AggregateFunc) *GoogleOauthStateSelect {
	goss.fns = append(goss.fns, fns...)
	return goss
}

// Scan applies the selector query and scans the result into the given value.
func (goss *GoogleOauthStateSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeGoogleOauthState, "Select")
	if err := goss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GoogleOauthStateQuery, *GoogleOauthStateSelect](ctx, goss.GoogleOauthStateQuery, goss, goss.inters, v)
}

func (goss *GoogleOauthStateSelect) sqlScan(ctx context.Context, root *GoogleOauthStateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(goss.fns))
	for _, fn := range goss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*goss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := goss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
