// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/ryzmevent"
)

// RyzmEventUpdate is the builder for updating RyzmEvent entities.
type RyzmEventUpdate struct {
	config
	hooks     []Hook
	mutation  *RyzmEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RyzmEventUpdate builder.
func (reu *RyzmEventUpdate) Where(ps ...predicate.RyzmEvent) *RyzmEventUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (reu *RyzmEventUpdate) SetEventID(id int) *RyzmEventUpdate {
	reu.mutation.SetEventID(id)
	return reu
}

// SetEvent sets the "event" edge to the Event entity.
func (reu *RyzmEventUpdate) SetEvent(e *Event) *RyzmEventUpdate {
	return reu.SetEventID(e.ID)
}

// Mutation returns the RyzmEventMutation object of the builder.
func (reu *RyzmEventUpdate) Mutation() *RyzmEventMutation {
	return reu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (reu *RyzmEventUpdate) ClearEvent() *RyzmEventUpdate {
	reu.mutation.ClearEvent()
	return reu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *RyzmEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RyzmEventMutation](ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *RyzmEventUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *RyzmEventUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *RyzmEventUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reu *RyzmEventUpdate) check() error {
	if _, ok := reu.mutation.EventID(); reu.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RyzmEvent.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (reu *RyzmEventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RyzmEventUpdate {
	reu.modifiers = append(reu.modifiers, modifiers...)
	return reu
}

func (reu *RyzmEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := reu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ryzmevent.Table,
			Columns: ryzmevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ryzmevent.FieldID,
			},
		},
	}
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if reu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ryzmevent.EventTable,
			Columns: []string{ryzmevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ryzmevent.EventTable,
			Columns: []string{ryzmevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(reu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ryzmevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// RyzmEventUpdateOne is the builder for updating a single RyzmEvent entity.
type RyzmEventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RyzmEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (reuo *RyzmEventUpdateOne) SetEventID(id int) *RyzmEventUpdateOne {
	reuo.mutation.SetEventID(id)
	return reuo
}

// SetEvent sets the "event" edge to the Event entity.
func (reuo *RyzmEventUpdateOne) SetEvent(e *Event) *RyzmEventUpdateOne {
	return reuo.SetEventID(e.ID)
}

// Mutation returns the RyzmEventMutation object of the builder.
func (reuo *RyzmEventUpdateOne) Mutation() *RyzmEventMutation {
	return reuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (reuo *RyzmEventUpdateOne) ClearEvent() *RyzmEventUpdateOne {
	reuo.mutation.ClearEvent()
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *RyzmEventUpdateOne) Select(field string, fields ...string) *RyzmEventUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated RyzmEvent entity.
func (reuo *RyzmEventUpdateOne) Save(ctx context.Context) (*RyzmEvent, error) {
	return withHooks[*RyzmEvent, RyzmEventMutation](ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *RyzmEventUpdateOne) SaveX(ctx context.Context) *RyzmEvent {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *RyzmEventUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *RyzmEventUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reuo *RyzmEventUpdateOne) check() error {
	if _, ok := reuo.mutation.EventID(); reuo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RyzmEvent.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (reuo *RyzmEventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RyzmEventUpdateOne {
	reuo.modifiers = append(reuo.modifiers, modifiers...)
	return reuo
}

func (reuo *RyzmEventUpdateOne) sqlSave(ctx context.Context) (_node *RyzmEvent, err error) {
	if err := reuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ryzmevent.Table,
			Columns: ryzmevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ryzmevent.FieldID,
			},
		},
	}
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RyzmEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ryzmevent.FieldID)
		for _, f := range fields {
			if !ryzmevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ryzmevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if reuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ryzmevent.EventTable,
			Columns: []string{ryzmevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ryzmevent.EventTable,
			Columns: []string{ryzmevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(reuo.modifiers...)
	_node = &RyzmEvent{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ryzmevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}
