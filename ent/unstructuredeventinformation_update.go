// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/predicate"
	"github.com/scarlet0725/prism-api/ent/unstructuredeventinformation"
)

// UnStructuredEventInformationUpdate is the builder for updating UnStructuredEventInformation entities.
type UnStructuredEventInformationUpdate struct {
	config
	hooks     []Hook
	mutation  *UnStructuredEventInformationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UnStructuredEventInformationUpdate builder.
func (useiu *UnStructuredEventInformationUpdate) Where(ps ...predicate.UnStructuredEventInformation) *UnStructuredEventInformationUpdate {
	useiu.mutation.Where(ps...)
	return useiu
}

// SetRyzmuuid sets the "ryzmuuid" field.
func (useiu *UnStructuredEventInformationUpdate) SetRyzmuuid(s string) *UnStructuredEventInformationUpdate {
	useiu.mutation.SetRyzmuuid(s)
	return useiu
}

// SetVenueName sets the "venue_name" field.
func (useiu *UnStructuredEventInformationUpdate) SetVenueName(s string) *UnStructuredEventInformationUpdate {
	useiu.mutation.SetVenueName(s)
	return useiu
}

// SetArtistName sets the "artist_name" field.
func (useiu *UnStructuredEventInformationUpdate) SetArtistName(s string) *UnStructuredEventInformationUpdate {
	useiu.mutation.SetArtistName(s)
	return useiu
}

// SetPrice sets the "price" field.
func (useiu *UnStructuredEventInformationUpdate) SetPrice(s string) *UnStructuredEventInformationUpdate {
	useiu.mutation.SetPrice(s)
	return useiu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (useiu *UnStructuredEventInformationUpdate) SetEventID(id int) *UnStructuredEventInformationUpdate {
	useiu.mutation.SetEventID(id)
	return useiu
}

// SetEvent sets the "event" edge to the Event entity.
func (useiu *UnStructuredEventInformationUpdate) SetEvent(e *Event) *UnStructuredEventInformationUpdate {
	return useiu.SetEventID(e.ID)
}

// Mutation returns the UnStructuredEventInformationMutation object of the builder.
func (useiu *UnStructuredEventInformationUpdate) Mutation() *UnStructuredEventInformationMutation {
	return useiu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (useiu *UnStructuredEventInformationUpdate) ClearEvent() *UnStructuredEventInformationUpdate {
	useiu.mutation.ClearEvent()
	return useiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (useiu *UnStructuredEventInformationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UnStructuredEventInformationMutation](ctx, useiu.sqlSave, useiu.mutation, useiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (useiu *UnStructuredEventInformationUpdate) SaveX(ctx context.Context) int {
	affected, err := useiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (useiu *UnStructuredEventInformationUpdate) Exec(ctx context.Context) error {
	_, err := useiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (useiu *UnStructuredEventInformationUpdate) ExecX(ctx context.Context) {
	if err := useiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (useiu *UnStructuredEventInformationUpdate) check() error {
	if _, ok := useiu.mutation.EventID(); useiu.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UnStructuredEventInformation.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (useiu *UnStructuredEventInformationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UnStructuredEventInformationUpdate {
	useiu.modifiers = append(useiu.modifiers, modifiers...)
	return useiu
}

func (useiu *UnStructuredEventInformationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := useiu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unstructuredeventinformation.Table,
			Columns: unstructuredeventinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unstructuredeventinformation.FieldID,
			},
		},
	}
	if ps := useiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := useiu.mutation.Ryzmuuid(); ok {
		_spec.SetField(unstructuredeventinformation.FieldRyzmuuid, field.TypeString, value)
	}
	if value, ok := useiu.mutation.VenueName(); ok {
		_spec.SetField(unstructuredeventinformation.FieldVenueName, field.TypeString, value)
	}
	if value, ok := useiu.mutation.ArtistName(); ok {
		_spec.SetField(unstructuredeventinformation.FieldArtistName, field.TypeString, value)
	}
	if value, ok := useiu.mutation.Price(); ok {
		_spec.SetField(unstructuredeventinformation.FieldPrice, field.TypeString, value)
	}
	if useiu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unstructuredeventinformation.EventTable,
			Columns: []string{unstructuredeventinformation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := useiu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unstructuredeventinformation.EventTable,
			Columns: []string{unstructuredeventinformation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(useiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, useiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unstructuredeventinformation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	useiu.mutation.done = true
	return n, nil
}

// UnStructuredEventInformationUpdateOne is the builder for updating a single UnStructuredEventInformation entity.
type UnStructuredEventInformationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UnStructuredEventInformationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRyzmuuid sets the "ryzmuuid" field.
func (useiuo *UnStructuredEventInformationUpdateOne) SetRyzmuuid(s string) *UnStructuredEventInformationUpdateOne {
	useiuo.mutation.SetRyzmuuid(s)
	return useiuo
}

// SetVenueName sets the "venue_name" field.
func (useiuo *UnStructuredEventInformationUpdateOne) SetVenueName(s string) *UnStructuredEventInformationUpdateOne {
	useiuo.mutation.SetVenueName(s)
	return useiuo
}

// SetArtistName sets the "artist_name" field.
func (useiuo *UnStructuredEventInformationUpdateOne) SetArtistName(s string) *UnStructuredEventInformationUpdateOne {
	useiuo.mutation.SetArtistName(s)
	return useiuo
}

// SetPrice sets the "price" field.
func (useiuo *UnStructuredEventInformationUpdateOne) SetPrice(s string) *UnStructuredEventInformationUpdateOne {
	useiuo.mutation.SetPrice(s)
	return useiuo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (useiuo *UnStructuredEventInformationUpdateOne) SetEventID(id int) *UnStructuredEventInformationUpdateOne {
	useiuo.mutation.SetEventID(id)
	return useiuo
}

// SetEvent sets the "event" edge to the Event entity.
func (useiuo *UnStructuredEventInformationUpdateOne) SetEvent(e *Event) *UnStructuredEventInformationUpdateOne {
	return useiuo.SetEventID(e.ID)
}

// Mutation returns the UnStructuredEventInformationMutation object of the builder.
func (useiuo *UnStructuredEventInformationUpdateOne) Mutation() *UnStructuredEventInformationMutation {
	return useiuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (useiuo *UnStructuredEventInformationUpdateOne) ClearEvent() *UnStructuredEventInformationUpdateOne {
	useiuo.mutation.ClearEvent()
	return useiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (useiuo *UnStructuredEventInformationUpdateOne) Select(field string, fields ...string) *UnStructuredEventInformationUpdateOne {
	useiuo.fields = append([]string{field}, fields...)
	return useiuo
}

// Save executes the query and returns the updated UnStructuredEventInformation entity.
func (useiuo *UnStructuredEventInformationUpdateOne) Save(ctx context.Context) (*UnStructuredEventInformation, error) {
	return withHooks[*UnStructuredEventInformation, UnStructuredEventInformationMutation](ctx, useiuo.sqlSave, useiuo.mutation, useiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (useiuo *UnStructuredEventInformationUpdateOne) SaveX(ctx context.Context) *UnStructuredEventInformation {
	node, err := useiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (useiuo *UnStructuredEventInformationUpdateOne) Exec(ctx context.Context) error {
	_, err := useiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (useiuo *UnStructuredEventInformationUpdateOne) ExecX(ctx context.Context) {
	if err := useiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (useiuo *UnStructuredEventInformationUpdateOne) check() error {
	if _, ok := useiuo.mutation.EventID(); useiuo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UnStructuredEventInformation.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (useiuo *UnStructuredEventInformationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UnStructuredEventInformationUpdateOne {
	useiuo.modifiers = append(useiuo.modifiers, modifiers...)
	return useiuo
}

func (useiuo *UnStructuredEventInformationUpdateOne) sqlSave(ctx context.Context) (_node *UnStructuredEventInformation, err error) {
	if err := useiuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unstructuredeventinformation.Table,
			Columns: unstructuredeventinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unstructuredeventinformation.FieldID,
			},
		},
	}
	id, ok := useiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UnStructuredEventInformation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := useiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unstructuredeventinformation.FieldID)
		for _, f := range fields {
			if !unstructuredeventinformation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unstructuredeventinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := useiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := useiuo.mutation.Ryzmuuid(); ok {
		_spec.SetField(unstructuredeventinformation.FieldRyzmuuid, field.TypeString, value)
	}
	if value, ok := useiuo.mutation.VenueName(); ok {
		_spec.SetField(unstructuredeventinformation.FieldVenueName, field.TypeString, value)
	}
	if value, ok := useiuo.mutation.ArtistName(); ok {
		_spec.SetField(unstructuredeventinformation.FieldArtistName, field.TypeString, value)
	}
	if value, ok := useiuo.mutation.Price(); ok {
		_spec.SetField(unstructuredeventinformation.FieldPrice, field.TypeString, value)
	}
	if useiuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unstructuredeventinformation.EventTable,
			Columns: []string{unstructuredeventinformation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := useiuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unstructuredeventinformation.EventTable,
			Columns: []string{unstructuredeventinformation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(useiuo.modifiers...)
	_node = &UnStructuredEventInformation{config: useiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, useiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unstructuredeventinformation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	useiuo.mutation.done = true
	return _node, nil
}
