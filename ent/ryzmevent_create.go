// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scarlet0725/prism-api/ent/event"
	"github.com/scarlet0725/prism-api/ent/ryzmevent"
)

// RyzmEventCreate is the builder for creating a RyzmEvent entity.
type RyzmEventCreate struct {
	config
	mutation *RyzmEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUUID sets the "uuid" field.
func (rec *RyzmEventCreate) SetUUID(s string) *RyzmEventCreate {
	rec.mutation.SetUUID(s)
	return rec
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (rec *RyzmEventCreate) SetEventID(id int) *RyzmEventCreate {
	rec.mutation.SetEventID(id)
	return rec
}

// SetEvent sets the "event" edge to the Event entity.
func (rec *RyzmEventCreate) SetEvent(e *Event) *RyzmEventCreate {
	return rec.SetEventID(e.ID)
}

// Mutation returns the RyzmEventMutation object of the builder.
func (rec *RyzmEventCreate) Mutation() *RyzmEventMutation {
	return rec.mutation
}

// Save creates the RyzmEvent in the database.
func (rec *RyzmEventCreate) Save(ctx context.Context) (*RyzmEvent, error) {
	return withHooks[*RyzmEvent, RyzmEventMutation](ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RyzmEventCreate) SaveX(ctx context.Context) *RyzmEvent {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *RyzmEventCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *RyzmEventCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *RyzmEventCreate) check() error {
	if _, ok := rec.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "RyzmEvent.uuid"`)}
	}
	if _, ok := rec.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "RyzmEvent.event"`)}
	}
	return nil
}

func (rec *RyzmEventCreate) sqlSave(ctx context.Context) (*RyzmEvent, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *RyzmEventCreate) createSpec() (*RyzmEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &RyzmEvent{config: rec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ryzmevent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ryzmevent.FieldID,
			},
		}
	)
	_spec.OnConflict = rec.conflict
	if value, ok := rec.mutation.UUID(); ok {
		_spec.SetField(ryzmevent.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if nodes := rec.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ryzmevent.EventTable,
			Columns: []string{ryzmevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_related_ryzm_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RyzmEvent.Create().
//		SetUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RyzmEventUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (rec *RyzmEventCreate) OnConflict(opts ...sql.ConflictOption) *RyzmEventUpsertOne {
	rec.conflict = opts
	return &RyzmEventUpsertOne{
		create: rec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RyzmEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rec *RyzmEventCreate) OnConflictColumns(columns ...string) *RyzmEventUpsertOne {
	rec.conflict = append(rec.conflict, sql.ConflictColumns(columns...))
	return &RyzmEventUpsertOne{
		create: rec,
	}
}

type (
	// RyzmEventUpsertOne is the builder for "upsert"-ing
	//  one RyzmEvent node.
	RyzmEventUpsertOne struct {
		create *RyzmEventCreate
	}

	// RyzmEventUpsert is the "OnConflict" setter.
	RyzmEventUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RyzmEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RyzmEventUpsertOne) UpdateNewValues() *RyzmEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(ryzmevent.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RyzmEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RyzmEventUpsertOne) Ignore() *RyzmEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RyzmEventUpsertOne) DoNothing() *RyzmEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RyzmEventCreate.OnConflict
// documentation for more info.
func (u *RyzmEventUpsertOne) Update(set func(*RyzmEventUpsert)) *RyzmEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RyzmEventUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *RyzmEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RyzmEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RyzmEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RyzmEventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RyzmEventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RyzmEventCreateBulk is the builder for creating many RyzmEvent entities in bulk.
type RyzmEventCreateBulk struct {
	config
	builders []*RyzmEventCreate
	conflict []sql.ConflictOption
}

// Save creates the RyzmEvent entities in the database.
func (recb *RyzmEventCreateBulk) Save(ctx context.Context) ([]*RyzmEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RyzmEvent, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RyzmEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = recb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *RyzmEventCreateBulk) SaveX(ctx context.Context) []*RyzmEvent {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *RyzmEventCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *RyzmEventCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RyzmEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RyzmEventUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (recb *RyzmEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *RyzmEventUpsertBulk {
	recb.conflict = opts
	return &RyzmEventUpsertBulk{
		create: recb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RyzmEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (recb *RyzmEventCreateBulk) OnConflictColumns(columns ...string) *RyzmEventUpsertBulk {
	recb.conflict = append(recb.conflict, sql.ConflictColumns(columns...))
	return &RyzmEventUpsertBulk{
		create: recb,
	}
}

// RyzmEventUpsertBulk is the builder for "upsert"-ing
// a bulk of RyzmEvent nodes.
type RyzmEventUpsertBulk struct {
	create *RyzmEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RyzmEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RyzmEventUpsertBulk) UpdateNewValues() *RyzmEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(ryzmevent.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RyzmEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RyzmEventUpsertBulk) Ignore() *RyzmEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RyzmEventUpsertBulk) DoNothing() *RyzmEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RyzmEventCreateBulk.OnConflict
// documentation for more info.
func (u *RyzmEventUpsertBulk) Update(set func(*RyzmEventUpsert)) *RyzmEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RyzmEventUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *RyzmEventUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RyzmEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RyzmEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RyzmEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
